import { useMemo } from 'react';
import { useActor } from './useActor';
export function fromService(service) {
    if (process.env.NODE_ENV !== 'production' && !('machine' in service)) {
        throw new Error("Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.");
    }
    var machine = service.machine;
    return {
        send: service.send.bind(service),
        subscribe: service.subscribe.bind(service),
        stop: service.stop,
        current: service.initialized ? service.state : machine.initialState,
        name: service.sessionId
    };
}
export function useService(service) {
    var serviceActor = useMemo(function () { return fromService(service); }, [service]);
    return useActor(serviceActor, function (actor) { return actor.current; });
}
