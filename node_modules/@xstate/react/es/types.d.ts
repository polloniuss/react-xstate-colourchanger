import { EventObject } from 'xstate';
export declare type Sender<TEvent extends EventObject> = (event: TEvent) => void;
export interface Subscription {
    unsubscribe(): void;
}
export interface Observer<T> {
    next?: (value: T) => void;
    error?: (errorValue: any) => void;
    complete: () => void;
}
export interface Subscribable<T> {
    subscribe(observer: Observer<T>): Subscription;
    subscribe(next: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;
}
export interface ActorRef<TEvent extends EventObject, TEmitted = any> extends Subscribable<TEmitted> {
    send: Sender<TEvent>;
    stop: () => void;
    /**
     * The most recently emitted value.
     */
    current: TEmitted;
    name: string;
}
export interface ActorRefLike<TEvent extends EventObject, TEmitted = any> extends Subscribable<TEmitted> {
    send: Sender<TEvent>;
    stop?: () => void;
    [key: string]: any;
}
export declare type MaybeLazy<T> = T | (() => T);
//# sourceMappingURL=types.d.ts.map