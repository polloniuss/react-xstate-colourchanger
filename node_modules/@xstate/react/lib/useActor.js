"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useActor = void 0;
var react_1 = require("react");
function useActor(actorRef, getSnapshot) {
    if (getSnapshot === void 0) { getSnapshot = function (a) {
        return 'state' in a ? a.state : undefined;
    }; }
    // const actor = useMemo(() => resolveActor(actorLike), [actorLike]);
    var deferredEventsRef = react_1.useRef([]);
    var _a = __read(react_1.useState(function () { return getSnapshot(actorRef); }), 2), current = _a[0], setCurrent = _a[1];
    var send = react_1.useCallback(function (event) {
        // If the previous actor is a deferred actor,
        // queue the events so that they can be replayed
        // on the non-deferred actor.
        if ('deferred' in actorRef && actorRef.deferred) {
            deferredEventsRef.current.push(event);
        }
        else {
            actorRef.send(event);
        }
    }, [actorRef]);
    react_1.useEffect(function () {
        setCurrent(getSnapshot(actorRef));
        var subscription = actorRef.subscribe(setCurrent);
        // Dequeue deferred events from the previous deferred actorRef
        while (deferredEventsRef.current.length > 0) {
            var deferredEvent = deferredEventsRef.current.shift();
            actorRef.send(deferredEvent);
        }
        return function () {
            subscription.unsubscribe();
        };
    }, [actorRef]);
    return [current, send];
}
exports.useActor = useActor;
