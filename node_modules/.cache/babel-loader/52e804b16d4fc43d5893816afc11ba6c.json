{"ast":null,"code":"export const grammar = \"\\n<grammar root=\\\"order\\\">\\n   <rule id=\\\"order\\\">\\n      I would like a\\n      <ruleref uri=\\\"#drink\\\"/>\\n      <tag>out.drink = new Object(); out.drink.liquid=rules.drink.type;\\n           out.drink.drinksize=rules.drink.drinksize;</tag>\\n      and\\n      <ruleref uri=\\\"#pizza\\\"/>\\n      <tag>out.pizza=rules.pizza;</tag>\\n   </rule>\\n   <rule id=\\\"kindofdrink\\\">\\n      <one-of>\\n         <item>coke</item>\\n         <item>pepsi</item>\\n         <item>coca cola<tag>out=\\\"coke\\\";</tag></item>\\n      </one-of>\\n   </rule>\\n   <rule id=\\\"foodsize\\\">\\n      <tag>out=\\\"medium\\\";</tag> <!-- \\\"medium\\\" is default if nothing said -->\\n      <item repeat=\\\"0-1\\\">\\n         <one-of>\\n            <item>small<tag>out=\\\"small\\\";</tag></item>\\n            <item>medium</item>\\n            <item>large<tag>out=\\\"large\\\";</tag></item>\\n            <item>regular<tag>out=\\\"medium\\\";</tag></item>\\n         </one-of>\\n      </item>\\n   </rule>\\n   <!-- Construct Array of toppings, return Array -->\\n   <rule id=\\\"tops\\\">\\n      <tag>out=new Array;</tag>\\n      <ruleref uri=\\\"#top\\\"/>\\n      <tag>out.push(rules.top);</tag>\\n      <item repeat=\\\"1-\\\">\\n         and\\n         <ruleref uri=\\\"#top\\\"/>\\n         <tag>out.push(rules.top);</tag>\\n      </item>\\n   </rule>\\n   <rule id=\\\"top\\\">\\n      <one-of>\\n         <item>anchovies</item>\\n         <item>pepperoni</item>\\n         <item>mushroom<tag>out=\\\"mushrooms\\\";</tag></item>\\n         <item>mushrooms</item>\\n      </one-of>\\n   </rule>\\n   <!-- Two properties (drinksize, type) on left hand side Rule Variable -->\\n   <rule id=\\\"drink\\\">\\n      <ruleref uri=\\\"#foodsize\\\"/>\\n      <ruleref uri=\\\"#kindofdrink\\\"/>\\n      <tag>out.drinksize=rules.foodsize; out.type=rules.kindofdrink;</tag>\\n   </rule>\\n   <!-- Three properties on rules.pizza -->\\n   <rule id=\\\"pizza\\\">\\n      <ruleref uri=\\\"#number\\\"/>\\n      <ruleref uri=\\\"#foodsize\\\"/>\\n      <tag>out.pizzasize=rules.foodsize; out.number=rules.number;</tag>\\n      pizzas with\\n      <ruleref uri=\\\"#tops\\\"/>\\n      <tag>out.topping=rules.tops;</tag>\\n   </rule>\\n   <rule id=\\\"number\\\">\\n      <one-of>\\n         <item>\\n            <tag>out=1;</tag>\\n            <one-of>\\n               <item>a</item>\\n               <item>one</item>\\n            </one-of>\\n         </item>\\n         <item>two<tag>out=2;</tag></item>\\n         <item>three<tag>out=3;</tag></item>\\n      </one-of>\\n   </rule>\\n</grammar>\\n\";","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/grammars/pizzaGrammar.ts"],"names":["grammar"],"mappings":"AAAA,OAAO,MAAMA,OAAO,w3EAAb","sourcesContent":["export const grammar = `\n<grammar root=\"order\">\n   <rule id=\"order\">\n      I would like a\n      <ruleref uri=\"#drink\"/>\n      <tag>out.drink = new Object(); out.drink.liquid=rules.drink.type;\n           out.drink.drinksize=rules.drink.drinksize;</tag>\n      and\n      <ruleref uri=\"#pizza\"/>\n      <tag>out.pizza=rules.pizza;</tag>\n   </rule>\n   <rule id=\"kindofdrink\">\n      <one-of>\n         <item>coke</item>\n         <item>pepsi</item>\n         <item>coca cola<tag>out=\"coke\";</tag></item>\n      </one-of>\n   </rule>\n   <rule id=\"foodsize\">\n      <tag>out=\"medium\";</tag> <!-- \"medium\" is default if nothing said -->\n      <item repeat=\"0-1\">\n         <one-of>\n            <item>small<tag>out=\"small\";</tag></item>\n            <item>medium</item>\n            <item>large<tag>out=\"large\";</tag></item>\n            <item>regular<tag>out=\"medium\";</tag></item>\n         </one-of>\n      </item>\n   </rule>\n   <!-- Construct Array of toppings, return Array -->\n   <rule id=\"tops\">\n      <tag>out=new Array;</tag>\n      <ruleref uri=\"#top\"/>\n      <tag>out.push(rules.top);</tag>\n      <item repeat=\"1-\">\n         and\n         <ruleref uri=\"#top\"/>\n         <tag>out.push(rules.top);</tag>\n      </item>\n   </rule>\n   <rule id=\"top\">\n      <one-of>\n         <item>anchovies</item>\n         <item>pepperoni</item>\n         <item>mushroom<tag>out=\"mushrooms\";</tag></item>\n         <item>mushrooms</item>\n      </one-of>\n   </rule>\n   <!-- Two properties (drinksize, type) on left hand side Rule Variable -->\n   <rule id=\"drink\">\n      <ruleref uri=\"#foodsize\"/>\n      <ruleref uri=\"#kindofdrink\"/>\n      <tag>out.drinksize=rules.foodsize; out.type=rules.kindofdrink;</tag>\n   </rule>\n   <!-- Three properties on rules.pizza -->\n   <rule id=\"pizza\">\n      <ruleref uri=\"#number\"/>\n      <ruleref uri=\"#foodsize\"/>\n      <tag>out.pizzasize=rules.foodsize; out.number=rules.number;</tag>\n      pizzas with\n      <ruleref uri=\"#tops\"/>\n      <tag>out.topping=rules.tops;</tag>\n   </rule>\n   <rule id=\"number\">\n      <one-of>\n         <item>\n            <tag>out=1;</tag>\n            <one-of>\n               <item>a</item>\n               <item>one</item>\n            </one-of>\n         </item>\n         <item>two<tag>out=2;</tag></item>\n         <item>three<tag>out=3;</tag></item>\n      </one-of>\n   </rule>\n</grammar>\n`\n"]},"metadata":{},"sourceType":"module"}