{"ast":null,"code":"import _objectSpread from \"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/own_project/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nconst resetScores = assign(context => {\n  return {\n    scoreSleep: 2,\n    scoreWork: 0,\n    scoreCall: 0,\n    scoreParty: 0,\n    count: 4,\n    projectSubmitted: 0\n  };\n});\n\nfunction giveScores(context) {\n  scoreList = [context.scoreSleep, context.scoreWork, context.scoreCall, context.scoreParty];\n\n  for (let i = 0; i < len(scoreList); i++) {\n    if (scoreList[i] < 1) {\n      scoreList[i] = 0;\n    } else {\n      scoreList[i] -= 1;\n    }\n  }\n\n  return context.scoreSleep, context.scoreWork, context.scoreCall, context.scoreParty;\n}\n\nfunction newDay(context) {\n  count = context.count - 1;\n  return \"There is \".concat(count, \" night left before the deadline.\");\n}\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction prompt(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt)\n      }\n    }\n  };\n}\n\nfunction promptAndAsk(prompt, nomatch, help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 10000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: [{\n            actions: cancel('maxsp'),\n            target: \"prompt\"\n          }]\n        }\n      },\n      help: {\n        entry: say(help),\n        on: {\n          ENDSPEECH: [{\n            actions: cancel('maxsp'),\n            target: \"prompt\"\n          }]\n        }\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'scenario'\n      }\n    },\n    scenario: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: {\n          actions: resetScores,\n          target: \"choice\"\n        }\n      }\n    }, prompt(\"We are on monday evening, and you're having exams everyday. But you just realized that you have a big project to submit on friday night! You have 5 nights before the deadline. What should you do ? You better know your priorities this week ...\")),\n    endGame: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: {\n          actions: resetScores,\n          target: \"init\"\n        }\n      }\n    }, prompt(\"It was nice to play!\")),\n    choice: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sleep\" in (grammar[context.recResult] || {}),\n          target: \"sleep\"\n        }, {\n          cond: context => \"work\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              projectSubmitted: 1\n            };\n          }),\n          target: \"work\"\n        }, {\n          cond: context => \"call\" in (grammar[context.recResult] || {}),\n          target: \"call\"\n        }, {\n          cond: context => \"party\" in (grammar[context.recResult] || {}),\n          target: \"party\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, promptAndAsk(\"What do you want to do tonight? You can sleep, work on your project, call your grandma or go to a party with your friends.\", \"Sorry I don't understand, can you repeat?\", \"You can say sleep, work, call grandma or party.\")),\n    choiceWithoutParty: _objectSpread({\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"sleep\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              scoreParty: context.scoreParty + 2\n            };\n          }),\n          target: \"sleep\"\n        }, {\n          cond: context => \"work\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              scoreParty: context.scoreParty + 2,\n              projectSubmitted: 1\n            };\n          }),\n          target: \"work\"\n        }, {\n          cond: context => \"call\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              scoreParty: context.scoreParty + 2\n            };\n          }),\n          target: \"call\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, promptAndAsk(\"What do you want to do tonight? You can sleep, work on your project or call your grandma.\", \"Sorry I don't understand, can you repeat?\", \"You can say sleep, work or call grandma. You're not allowed to party tonight.\")),\n    sleep: {\n      initial: \"night\",\n      on: {\n        ENDSPEECH: {\n          actions: assign(context => {\n            return {\n              scoreSleep: context.scoreSleep + 3\n            };\n          }),\n          target: \"checkValues\"\n        }\n      },\n      states: {\n        night: {\n          entry: say(\"What a wonderful and fructive sleep! You're more than ready for this new day!\"),\n          on: {\n            ENDSPEECH: {\n              actions: giveScores,\n              target: \"newDay\"\n            }\n          }\n        },\n        newDay: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: newDay(context)\n          }))\n        }\n      }\n    },\n    work: {\n      initial: \"night\",\n      on: {\n        ENDSPEECH: {\n          actions: assign(context => {\n            return {\n              scoreWork: context.scoreWork + 3\n            };\n          }),\n          target: \"checkValues\"\n        }\n      },\n      states: {\n        night: {\n          entry: say(\"You worked the whole night on your project, that was hard but productive.\"),\n          on: {\n            ENDSPEECH: {\n              actions: giveScores,\n              target: \"newDay\"\n            }\n          }\n        },\n        newDay: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: newDay(context)\n          }))\n        }\n      }\n    },\n    call: {\n      initial: \"night\",\n      on: {\n        ENDSPEECH: {\n          actions: assign(context => {\n            return {\n              scoreCall: context.scoreCall + 3\n            };\n          }),\n          target: \"checkValues\"\n        }\n      },\n      states: {\n        night: {\n          entry: say(\"Your grandmother spent the night talking to you about her neighbors.\"),\n          on: {\n            ENDSPEECH: {\n              actions: giveScores,\n              target: \"newDay\"\n            }\n          }\n        },\n        newDay: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: newDay(context)\n          }))\n        }\n      }\n    },\n    party: {\n      initial: \"night\",\n      on: {\n        ENDSPEECH: {\n          actions: assign(context => {\n            return {\n              scoreParty: context.scoreParty + 3\n            };\n          }),\n          target: \"checkValues\"\n        }\n      },\n      states: {\n        night: {\n          entry: say(\"This was a huge party! You had a lot of fun, but you're still a little drunk.\"),\n          on: {\n            ENDSPEECH: {\n              actions: giveScores,\n              target: \"newDay\"\n            }\n          }\n        },\n        newDay: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: newDay(context)\n          }))\n        }\n      }\n    },\n    checkValues: {\n      always: [{\n        cond: context => context.count = 0,\n        target: \"winScore\"\n      }, {\n        cond: context => context.scoreSleep = 0,\n        actions: assign(context => {\n          return {\n            projectSubmitted: 0\n          };\n        }),\n        target: \"youNeedToSleep\"\n      }, {\n        cond: context => context.scoreParty = 0,\n        actions: assign(context => {\n          return {\n            projectSubmitted: 0\n          };\n        }),\n        target: \"youWontParty\"\n      }, {\n        actions: assign(context => {\n          return {\n            projectSubmitted: 0\n          };\n        }),\n        target: \"choice\"\n      }]\n    },\n    youNeedToSleep: _objectSpread({\n      on: {\n        ENDSPEECH: \"sleep\"\n      }\n    }, prompt(\"You haven't sleep for the last 2 days! You're so tired that you just fall asleep on the floor. You won't be able to do anything else tonight.\")),\n    youWontParty: _objectSpread({\n      on: {\n        ENDSPEECH: \"choiceWithoutParty\"\n      }\n    }, prompt(\"Your friends are sensitive, and took it badly that you didn't go to their party yesterday. They decided not to invite you today.\")),\n    winScore: {\n      always: [// Winning sleep\n      {\n        cond: context => context.scoreSleep = 12,\n        target: \"winSleepHigh\"\n      }, {\n        cond: context => context.scoreSleep >= 6,\n        target: \"winSleepMedium\"\n      }, {\n        cond: context => context.scoreSleep = 3,\n        target: \"winSleepLow\"\n      }, // Winning high score\n      {\n        cond: context => context.scoreParty = 7,\n        target: \"winPartyHigh\"\n      }, {\n        cond: context => context.scoreCall = 7,\n        target: \"winCallHigh\"\n      }, {\n        cond: context => context.scoreWork === 7 && context.projectSubmitted === 1,\n        target: \"superWinWorkHigh\"\n      }, {\n        cond: context => context.scoreWork = 7,\n        target: \"winWorkHigh\"\n      }, // Winning medium score\n      {\n        cond: context => context.scoreParty = 4,\n        target: \"winPartyMedium\"\n      }, {\n        cond: context => context.scoreCall = 4,\n        target: \"winCallMedium\"\n      }, {\n        cond: context => context.scoreWork === 4 && context.projectSubmitted === 1,\n        target: \"superWinWorkMedium\"\n      }, {\n        cond: context => context.scoreWork = 4,\n        target: \"winWorkMedium\"\n      }, // Winning low score\n      {\n        cond: context => context.scoreParty = 2,\n        target: \"winPartyLow\"\n      }, {\n        cond: context => context.scoreCall = 2,\n        target: \"winCallLow\"\n      }, {\n        cond: context => context.scoreWork === 2 && context.projectSubmitted === 1,\n        target: \"superWinWorkLow\"\n      }, {\n        cond: context => context.scoreWork = 2,\n        target: \"winWorkLow\"\n      }]\n    },\n    winSleepHigh: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Best sleep\")),\n    winSleepMedium: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Medium sleep\")),\n    winSleepLow: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Bad sleep\")),\n    winWorkHigh: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Best work\")),\n    winWorkMedium: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Medium work\")),\n    winWorkLow: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Bad work\")),\n    superWinWorkHigh: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Best best work\")),\n    superWinWorkMedium: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Best Medium work\")),\n    superWinWorkLow: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Worst bad work\")),\n    winCallHigh: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Best child\")),\n    winCallMedium: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Medium child\")),\n    winCallLow: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Bad child\")),\n    winPartyHigh: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Best friend\")),\n    winPartyMedium: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Medium friend\")),\n    winPartyLow: _objectSpread({\n      on: {\n        ENDSPEECH: \"playAgain\"\n      }\n    }, prompt(\"Bad friend\")),\n    playAgain: _objectSpread({\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (dict[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              agree: dict[context.recResult].agree\n            };\n          }), cancel('maxsp')],\n          target: \"scenario\"\n        }, {\n          cond: context => \"help\" in (dict[context.recResult] || {}),\n          target: \".help\"\n        }, {\n          cond: context => \"refuse\" in (dict[context.recResult] || {}),\n          actions: [assign(context => {\n            return {\n              refuse: dict[context.recResult].refuse\n            };\n          }), cancel('maxsp')],\n          target: \"endGame\"\n        }, {\n          target: \".nomatch\"\n        }]\n      }\n    }, promptAndAsk(\"Do you want to play again and try another of the 12 possible ends?\", \"Sorry I don't understand, can you repeat?\", \"You can say yes or no.\"))\n  }\n};\nconst dict = {\n  //  Lexicon for the action \"sleep\"\n  \"go to bed\": {\n    sleep: \"sleep\"\n  },\n  \"I want to sleep\": {\n    sleep: \"sleep\"\n  },\n  \"sleeping\": {\n    sleep: \"sleep\"\n  },\n  \"sleep\": {\n    sleep: \"sleep\"\n  },\n  \"let's go sleeping\": {\n    sleep: \"sleep\"\n  },\n  \"I want to go to bed\": {\n    sleep: \"sleep\"\n  },\n  \"I should go to bed\": {\n    sleep: \"sleep\"\n  },\n  \"I should go sleeping\": {\n    sleep: \"sleep\"\n  },\n  \"I need to sleep\": {\n    sleep: \"sleep\"\n  },\n  \"I will sleep\": {\n    sleep: \"sleep\"\n  },\n  \"I'm gonna sleep\": {\n    sleep: \"sleep\"\n  },\n  \"let's sleep\": {\n    sleep: \"sleep\"\n  },\n  \"I'm going to sleep\": {\n    sleep: \"sleep\"\n  },\n  \"so tired\": {\n    sleep: \"sleep\"\n  },\n  \"I need my bed\": {\n    sleep: \"sleep\"\n  },\n  //  Lexicon for the action \"work\"\n  \"project\": {\n    work: \"work\"\n  },\n  \"let's work\": {\n    work: \"work\"\n  },\n  \"work\": {\n    work: \"work\"\n  },\n  \"working\": {\n    work: \"work\"\n  },\n  \"work on the project\": {\n    work: \"work\"\n  },\n  \"I want to work\": {\n    work: \"work\"\n  },\n  \"I'm gonna work\": {\n    work: \"work\"\n  },\n  \"I'm going to work\": {\n    work: \"work\"\n  },\n  \"I will work\": {\n    work: \"work\"\n  },\n  \"I need to work\": {\n    work: \"work\"\n  },\n  \"I should work\": {\n    work: \"work\"\n  },\n  \"I want to work on my project\": {\n    work: \"work\"\n  },\n  \"I'm gonna work on my project\": {\n    work: \"work\"\n  },\n  \"I'm going to work on my project\": {\n    work: \"work\"\n  },\n  \"I will work on my project\": {\n    work: \"work\"\n  },\n  \"I need to work on my project\": {\n    work: \"work\"\n  },\n  \"I should work on my project\": {\n    work: \"work\"\n  },\n  \"let's be productive tonight\": {\n    work: \"work\"\n  },\n  //  Lexicon for the action \"call\"\n  \"call\": {\n    call: \"call\"\n  },\n  \"call grandma\": {\n    call: \"call\"\n  },\n  \"let's call\": {\n    call: \"call\"\n  },\n  \"calling grandma\": {\n    call: \"call\"\n  },\n  \"calling\": {\n    call: \"call\"\n  },\n  \"call my grandma\": {\n    call: \"call\"\n  },\n  \"call my grandmother\": {\n    call: \"call\"\n  },\n  \"I want to call\": {\n    call: \"call\"\n  },\n  \"I'm gonna call\": {\n    call: \"call\"\n  },\n  \"I'm going to call my grandma\": {\n    call: \"call\"\n  },\n  \"I will call my grandma\": {\n    call: \"call\"\n  },\n  \"I need to call my grandma\": {\n    call: \"call\"\n  },\n  \"call mamie\": {\n    call: \"call\"\n  },\n  \"I should call my grand-mother\": {\n    call: \"call\"\n  },\n  \"I wonder how is grandma\": {\n    call: \"call\"\n  },\n  //  Lexicon for the action \"party\"\n  \"let's have a beer\": {\n    party: \"party\"\n  },\n  \"I want to party\": {\n    party: \"party\"\n  },\n  \"I wanna party\": {\n    party: \"party\"\n  },\n  \"party\": {\n    party: \"party\"\n  },\n  \"let's go to the party\": {\n    party: \"party\"\n  },\n  \"I will party\": {\n    party: \"party\"\n  },\n  \"I will go to the party\": {\n    party: \"party\"\n  },\n  \"I wanna get wasted\": {\n    party: \"party\"\n  },\n  \"let's binge drinjing\": {\n    party: \"party\"\n  },\n  \"shot shot shot\": {\n    party: \"party\"\n  },\n  \"I wanna get drunk\": {\n    party: \"party\"\n  },\n  \"I will join the party\": {\n    party: \"party\"\n  },\n  \"I deserve to party tonight\": {\n    party: \"party\"\n  },\n  \"I'm going to the party\": {\n    party: \"party\"\n  },\n  \"I'm thirsty\": {\n    party: \"party\"\n  },\n  \"I need to drink strong alcohol right now\": {\n    party: \"party\"\n  },\n  //  Lexicon for asking \"help\"\n  \"help\": {\n    help: \"help\"\n  },\n  \"I don't understand\": {\n    help: \"help\"\n  },\n  \"please help\": {\n    help: \"help\"\n  },\n  \"what can I do\": {\n    help: \"help\"\n  },\n  \"what are the actions\": {\n    help: \"help\"\n  },\n  \"which actions\": {\n    help: \"help\"\n  },\n  \"can you repeat\": {\n    help: \"help\"\n  },\n  \"let's go back\": {\n    help: \"help\"\n  },\n  //  Lexicon for answers\n  \"yes\": {\n    agree: \"yes\"\n  },\n  \"yeah\": {\n    agree: \"yes\"\n  },\n  \"sounds good\": {\n    agree: \"yes\"\n  },\n  \"of course\": {\n    agree: \"yes\"\n  },\n  \"probably\": {\n    agree: \"yes\"\n  },\n  \"it's fine\": {\n    agree: \"yes\"\n  },\n  \"no\": {\n    refuse: \"no\"\n  },\n  \"I'm not sure\": {\n    refuse: \"no\"\n  },\n  \"I don't think so\": {\n    refuse: \"no\"\n  },\n  \"no way\": {\n    refuse: \"no\"\n  },\n  \"absolutely not\": {\n    refuse: \"no\"\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/own_project/react-xstate-colourchanger/src/dmTheNight.ts"],"names":["assign","actions","send","cancel","inspect","url","iframe","resetScores","context","scoreSleep","scoreWork","scoreCall","scoreParty","count","projectSubmitted","giveScores","scoreList","i","len","newDay","say","text","_context","type","value","listen","prompt","initial","states","entry","promptAndAsk","nomatch","help","on","ENDSPEECH","ask","delay","id","target","dmMachine","init","CLICK","scenario","endGame","choice","RECOGNISED","cond","grammar","recResult","choiceWithoutParty","sleep","night","work","call","party","checkValues","always","youNeedToSleep","youWontParty","winScore","winSleepHigh","winSleepMedium","winSleepLow","winWorkHigh","winWorkMedium","winWorkLow","superWinWorkHigh","superWinWorkMedium","superWinWorkLow","winCallHigh","winCallMedium","winCallLow","winPartyHigh","winPartyMedium","winPartyLow","playAgain","dict","agree","refuse"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\"\r\nconst { send, cancel } = actions\r\n\r\nimport { inspect } from '@xstate/inspect'\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nconst resetScores: Action<SDSContext, SDSEvent> = \r\n    assign((context) => {\r\n        return { scoreSleep:2, scoreWork:0, scoreCall:0, scoreParty:0, count:4, projectSubmitted: 0} \r\n    })\r\nfunction giveScores(context:SDSContext){\r\n    scoreList = [context.scoreSleep, context.scoreWork, context.scoreCall, context.scoreParty]\r\n    for (let i=0; i < len(scoreList); i++){\r\n        if (scoreList[i] < 1){\r\n            scoreList[i] = 0\r\n        }\r\n        else {\r\n            scoreList[i] -= 1\r\n        }\r\n    }\r\n    return context.scoreSleep, context.scoreWork, context.scoreCall, context.scoreParty\r\n}\r\nfunction newDay(context:SDSContext){\r\n    count = context.count - 1\r\n    return `There is ${count} night left before the deadline.`\r\n}\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\nfunction prompt(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt)\r\n            }\r\n        }\r\n    })\r\n}\r\nfunction promptAndAsk(prompt: string, nomatch: string, help: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n                prompt: {\r\n                    entry: say(prompt),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: [send('LISTEN'), send('MAXSPEECH', { delay: 10000, id: 'maxsp' })]\r\n                },\r\n                nomatch: {\r\n                    entry: say(nomatch),\r\n                    on: { ENDSPEECH: [{ \r\n                            actions: cancel('maxsp'),\r\n                            target: \"prompt\" \r\n                    }] }\r\n                },\r\n                help: {\r\n                    entry: say(help),\r\n                    on: { ENDSPEECH: [{ \r\n                            actions: cancel('maxsp'),\r\n                            target: \"prompt\" \r\n                    }] }\r\n                }\r\n        }\r\n    })\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'scenario'\r\n            }\r\n        },\r\n\r\n        scenario: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                ENDSPEECH: {\r\n                    actions: resetScores,\r\n                    target: \"choice\"\r\n                }\r\n            },\r\n            ...prompt(\"We are on monday evening, and you're having exams everyday. But you just realized that you have a big project to submit on friday night! You have 5 nights before the deadline. What should you do ? You better know your priorities this week ...\")\r\n        },\r\n\r\n        endGame: {\r\n            initial: \"prompt\",\r\n            on: { \r\n                ENDSPEECH: {\r\n                    actions: resetScores,\r\n                    target: \"init\"\r\n                }\r\n            },\r\n            ...prompt(\"It was nice to play!\")\r\n        },\r\n\r\n        choice: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"sleep\" in (grammar[context.recResult] || {}),\r\n                    target: \"sleep\"\r\n                },\r\n                {\r\n                    cond: (context) => \"work\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { projectSubmitted: 1 } }),\r\n                    target: \"work\"\r\n                },\r\n                {\r\n                    cond: (context) => \"call\" in (grammar[context.recResult] || {}),\r\n                    target: \"call\"\r\n                },\r\n                {\r\n                    cond: (context) => \"party\" in (grammar[context.recResult] || {}),\r\n                    target: \"party\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            ...promptAndAsk(\"What do you want to do tonight? You can sleep, work on your project, call your grandma or go to a party with your friends.\",\"Sorry I don't understand, can you repeat?\", \"You can say sleep, work, call grandma or party.\")\r\n        },\r\n\r\n        choiceWithoutParty: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"sleep\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { scoreParty: context.scoreParty+2 } }),\r\n                    target: \"sleep\"\r\n                },\r\n                {\r\n                    cond: (context) => \"work\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { scoreParty: context.scoreParty+2, projectSubmitted: 1 } }),\r\n                    target: \"work\"\r\n                },\r\n                {\r\n                    cond: (context) => \"call\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { scoreParty: context.scoreParty+2 } }),\r\n                    target: \"call\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            ...promptAndAsk(\"What do you want to do tonight? You can sleep, work on your project or call your grandma.\",\"Sorry I don't understand, can you repeat?\", \"You can say sleep, work or call grandma. You're not allowed to party tonight.\")\r\n        },\r\n\r\n        sleep: {\r\n            initial: \"night\",\r\n            on: {\r\n                ENDSPEECH: {\r\n                    actions: assign((context) => { return { scoreSleep: context.scoreSleep+3 } }),\r\n                    target: \"checkValues\" \r\n                }\r\n            },\r\n            states: {\r\n                night: {\r\n                    entry: say(\"What a wonderful and fructive sleep! You're more than ready for this new day!\"),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            actions: giveScores,\r\n                            target: \"newDay\" \r\n                        }\r\n                    }\r\n                },\r\n                newDay: {\r\n                    entry: send((context)=>({ type: \"SPEAK\", value: newDay(context) }))\r\n                }\r\n            }\r\n        },\r\n        work: {\r\n            initial: \"night\",\r\n            on: {\r\n                ENDSPEECH: {\r\n                    actions: assign((context) => { return { scoreWork: context.scoreWork+3 } }),\r\n                    target: \"checkValues\" \r\n                }\r\n            },\r\n            states: {\r\n                night: {\r\n                    entry: say(\"You worked the whole night on your project, that was hard but productive.\"),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            actions: giveScores,\r\n                            target: \"newDay\" \r\n                        }\r\n                    }\r\n                },\r\n                newDay: {\r\n                    entry: send((context)=>({ type: \"SPEAK\", value: newDay(context) }))\r\n                }\r\n            }\r\n        },\r\n        call: {\r\n            initial: \"night\",\r\n            on: {\r\n                ENDSPEECH: {\r\n                    actions: assign((context) => { return { scoreCall: context.scoreCall+3 } }),\r\n                    target: \"checkValues\" \r\n                }\r\n            },\r\n            states: {\r\n                night: {\r\n                    entry: say(\"Your grandmother spent the night talking to you about her neighbors.\"),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            actions: giveScores,\r\n                            target: \"newDay\" \r\n                        }\r\n                    }\r\n                },\r\n                newDay: {\r\n                    entry: send((context)=>({ type: \"SPEAK\", value: newDay(context) }))\r\n                }\r\n            }\r\n        },\r\n        party: {\r\n            initial: \"night\",\r\n            on: {\r\n                ENDSPEECH: {\r\n                    actions: assign((context) => { return { scoreParty: context.scoreParty+3 } }),\r\n                    target: \"checkValues\" \r\n                }\r\n            },\r\n            states: {\r\n                night: {\r\n                    entry: say(\"This was a huge party! You had a lot of fun, but you're still a little drunk.\"),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            actions: giveScores,\r\n                            target: \"newDay\" \r\n                        }\r\n                    }\r\n                },\r\n                newDay: {\r\n                    entry: send((context)=>({ type: \"SPEAK\", value: newDay(context) }))\r\n                }\r\n            }\r\n        },\r\n\r\n        checkValues: {\r\n            always: [\r\n                {\r\n                    cond: (context) => context.count = 0,\r\n                    target: \"winScore\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreSleep = 0,\r\n                    actions: assign((context) => { return { projectSubmitted: 0 } }),\r\n                    target: \"youNeedToSleep\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreParty = 0,\r\n                    actions: assign((context) => { return { projectSubmitted: 0 } }),\r\n                    target: \"youWontParty\"\r\n                },\r\n                {   actions: assign((context) => { return { projectSubmitted: 0 } }),\r\n                    target: \"choice\"\r\n                }\r\n            ]\r\n        },\r\n\r\n        youNeedToSleep: {\r\n            on: { ENDSPEECH: \"sleep\" },\r\n            ...prompt(\"You haven't sleep for the last 2 days! You're so tired that you just fall asleep on the floor. You won't be able to do anything else tonight.\")\r\n        },\r\n\r\n        youWontParty: {\r\n            on: { ENDSPEECH: \"choiceWithoutParty\" },\r\n            ...prompt(\"Your friends are sensitive, and took it badly that you didn't go to their party yesterday. They decided not to invite you today.\")\r\n        },\r\n\r\n        winScore:{\r\n            always: [\r\n                // Winning sleep\r\n                {\r\n                    cond: (context) => context.scoreSleep = 12,\r\n                    target: \"winSleepHigh\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreSleep >= 6,\r\n                    target: \"winSleepMedium\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreSleep = 3,\r\n                    target: \"winSleepLow\"\r\n                },\r\n\r\n                // Winning high score\r\n                {\r\n                    cond: (context) => context.scoreParty = 7,\r\n                    target: \"winPartyHigh\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreCall = 7,\r\n                    target: \"winCallHigh\"\r\n                },\r\n                {\r\n                    cond: (context) => (context.scoreWork===7) && (context.projectSubmitted===1),\r\n                    target: \"superWinWorkHigh\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreWork = 7,\r\n                    target: \"winWorkHigh\"\r\n                },\r\n\r\n                // Winning medium score\r\n                {\r\n                    cond: (context) => context.scoreParty = 4,\r\n                    target: \"winPartyMedium\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreCall = 4,\r\n                    target: \"winCallMedium\"\r\n                },\r\n                {\r\n                    cond: (context) => (context.scoreWork===4) && (context.projectSubmitted===1),\r\n                    target: \"superWinWorkMedium\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreWork = 4,\r\n                    target: \"winWorkMedium\"\r\n                },\r\n\r\n                // Winning low score\r\n                {\r\n                    cond: (context) => context.scoreParty = 2,\r\n                    target: \"winPartyLow\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreCall = 2,\r\n                    target: \"winCallLow\"\r\n                },\r\n                {\r\n                    cond: (context) => (context.scoreWork===2) && (context.projectSubmitted===1),\r\n                    target: \"superWinWorkLow\"\r\n                },\r\n                {\r\n                    cond: (context) => context.scoreWork = 2,\r\n                    target: \"winWorkLow\"\r\n                },\r\n            ]\r\n        },\r\n\r\n        winSleepHigh: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Best sleep\")\r\n        },\r\n        winSleepMedium: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Medium sleep\")\r\n        },\r\n        winSleepLow: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Bad sleep\")\r\n        },\r\n\r\n        winWorkHigh: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Best work\")\r\n        },\r\n        winWorkMedium: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Medium work\")\r\n        },\r\n        winWorkLow: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Bad work\")\r\n        },\r\n\r\n        superWinWorkHigh: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Best best work\")\r\n        },\r\n        superWinWorkMedium: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Best Medium work\")\r\n        },\r\n        superWinWorkLow: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Worst bad work\")\r\n        },\r\n\r\n        winCallHigh: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Best child\")\r\n        },\r\n        winCallMedium: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Medium child\")\r\n        },\r\n        winCallLow: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Bad child\")\r\n        },\r\n\r\n        winPartyHigh: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Best friend\")\r\n        },\r\n        winPartyMedium: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Medium friend\")\r\n        },\r\n        winPartyLow: {\r\n            on: { ENDSPEECH: \"playAgain\" },\r\n            ...prompt(\"Bad friend\")\r\n        },\r\n\r\n        playAgain: {\r\n            on: {\r\n                    RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"scenario\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"endGame\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n            },\r\n            ...promptAndAsk(\"Do you want to play again and try another of the 12 possible ends?\",\"Sorry I don't understand, can you repeat?\", \"You can say yes or no.\")\r\n        }\r\n    }\r\n})\r\n\r\nconst dict: { [index: string]: { sleep?: string, work?: string, call?: string, party?: string, help?: string, agree?: string, refuse?: string } } = {\r\n\r\n    //  Lexicon for the action \"sleep\"\r\n    \"go to bed\": { sleep: \"sleep\" },\r\n    \"I want to sleep\": { sleep: \"sleep\" },\r\n    \"sleeping\": { sleep: \"sleep\" },\r\n    \"sleep\": { sleep: \"sleep\" },\r\n    \"let's go sleeping\": { sleep: \"sleep\" },\r\n    \"I want to go to bed\": { sleep: \"sleep\" },\r\n    \"I should go to bed\": { sleep: \"sleep\" },\r\n    \"I should go sleeping\": { sleep: \"sleep\" },\r\n    \"I need to sleep\": { sleep: \"sleep\" },\r\n    \"I will sleep\": { sleep: \"sleep\" },\r\n    \"I'm gonna sleep\": { sleep: \"sleep\" },\r\n    \"let's sleep\": { sleep: \"sleep\" },\r\n    \"I'm going to sleep\": { sleep: \"sleep\" },\r\n    \"so tired\": { sleep: \"sleep\" },\r\n    \"I need my bed\": { sleep: \"sleep\" },\r\n\r\n    //  Lexicon for the action \"work\"\r\n    \"project\": { work: \"work\" },\r\n    \"let's work\": { work: \"work\" },\r\n    \"work\": { work: \"work\" },\r\n    \"working\": { work: \"work\" },\r\n    \"work on the project\": { work: \"work\" },\r\n    \"I want to work\": { work: \"work\" },\r\n    \"I'm gonna work\": { work: \"work\" },\r\n    \"I'm going to work\": { work: \"work\" },\r\n    \"I will work\": { work: \"work\" },\r\n    \"I need to work\": { work: \"work\" },\r\n    \"I should work\": { work: \"work\" },\r\n    \"I want to work on my project\": { work: \"work\" },\r\n    \"I'm gonna work on my project\": { work: \"work\" },\r\n    \"I'm going to work on my project\": { work: \"work\" },\r\n    \"I will work on my project\": { work: \"work\" },\r\n    \"I need to work on my project\": { work: \"work\" },\r\n    \"I should work on my project\": { work: \"work\" },\r\n    \"let's be productive tonight\": { work: \"work\" },\r\n\r\n    //  Lexicon for the action \"call\"\r\n    \"call\": { call: \"call\" },\r\n    \"call grandma\": { call: \"call\" },\r\n    \"let's call\": { call: \"call\" },\r\n    \"calling grandma\": { call: \"call\" },\r\n    \"calling\": { call: \"call\" },\r\n    \"call my grandma\": { call: \"call\" },\r\n    \"call my grandmother\": { call: \"call\" },\r\n    \"I want to call\": { call: \"call\" },\r\n    \"I'm gonna call\": { call: \"call\" },\r\n    \"I'm going to call my grandma\": { call: \"call\" },\r\n    \"I will call my grandma\": { call: \"call\" },\r\n    \"I need to call my grandma\": { call: \"call\" },\r\n    \"call mamie\": { call: \"call\" },\r\n    \"I should call my grand-mother\": { call: \"call\" },\r\n    \"I wonder how is grandma\": { call: \"call\" },\r\n\r\n    //  Lexicon for the action \"party\"\r\n    \"let's have a beer\": { party: \"party\" },\r\n    \"I want to party\": { party: \"party\" },\r\n    \"I wanna party\": { party: \"party\" },\r\n    \"party\": { party: \"party\" },\r\n    \"let's go to the party\": { party: \"party\" },\r\n    \"I will party\": { party: \"party\" },\r\n    \"I will go to the party\": { party: \"party\" },\r\n    \"I wanna get wasted\": { party: \"party\" },\r\n    \"let's binge drinjing\": { party: \"party\" },\r\n    \"shot shot shot\": { party: \"party\" },\r\n    \"I wanna get drunk\": { party: \"party\" },\r\n    \"I will join the party\": { party: \"party\" },\r\n    \"I deserve to party tonight\": { party: \"party\" },\r\n    \"I'm going to the party\": { party: \"party\" },\r\n    \"I'm thirsty\": { party: \"party\" },\r\n    \"I need to drink strong alcohol right now\": { party: \"party\" },\r\n\r\n    //  Lexicon for asking \"help\"\r\n    \"help\": { help: \"help\" },\r\n    \"I don't understand\": { help: \"help\" },\r\n    \"please help\": { help: \"help\" },\r\n    \"what can I do\": { help: \"help\" },\r\n    \"what are the actions\": { help: \"help\" },\r\n    \"which actions\": { help: \"help\" },\r\n    \"can you repeat\": { help: \"help\" },\r\n    \"let's go back\": { help: \"help\" },\r\n\r\n    //  Lexicon for answers\r\n    \"yes\": { agree: \"yes\" },\r\n    \"yeah\": { agree: \"yes\" },\r\n    \"sounds good\": { agree: \"yes\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"probably\": { agree: \"yes\" },\r\n    \"it's fine\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"I'm not sure\": { refuse: \"no\" },\r\n    \"I don't think so\": { refuse: \"no\" },\r\n    \"no way\": { refuse: \"no\" },\r\n    \"absolutely not\": { refuse: \"no\" },\r\n}"]},"metadata":{},"sourceType":"module"}