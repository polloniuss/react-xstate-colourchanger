{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\n\nconst getDataFromAPI = userId => fetch(\"https://nlu-heroku.herokuapp.com/\").then(data => data.json());\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Orangeseed\"\n  },\n  \"Dan\": {\n    person: \"Dan Cherryseed\"\n  },\n  \"Steve\": {\n    person: \"Steve Strawberryseed\"\n  },\n  \"Klaus\": {\n    person: \"Klaus Pearseed\"\n  },\n  \"Gus\": {\n    person: \"Gus Bananaseed\"\n  },\n  \"Jennifer\": {\n    person: \"Jennifer Pineappleseed\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"next Monday\": {\n    day: \"Monday\"\n  },\n  \"next Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"next Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"next Thursday\": {\n    day: \"Thursday\"\n  },\n  \"next Friday\": {\n    day: \"Friday\"\n  },\n  \"next Saturday\": {\n    day: \"Saturday\"\n  },\n  \"next Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"it's at 8\": {\n    time: \"08:00\"\n  },\n  \"it's at 9\": {\n    time: \"09:00\"\n  },\n  \"it's at 10\": {\n    time: \"10:00\"\n  },\n  \"it's at 11\": {\n    time: \"11:00\"\n  },\n  \"it's at 12\": {\n    time: \"12:00\"\n  },\n  \"it's at 1\": {\n    time: \"13:00\"\n  },\n  \"it's at 2\": {\n    time: \"14:00\"\n  },\n  \"it's at 3\": {\n    time: \"15:00\"\n  },\n  \"it's at 4\": {\n    time: \"16:00\"\n  },\n  \"it's at 5\": {\n    time: \"17:00\"\n  },\n  \"it's at 6\": {\n    time: \"18:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 1\": {\n    time: \"13:00\"\n  },\n  \"at 2\": {\n    time: \"14:00\"\n  },\n  \"at 3\": {\n    time: \"15:00\"\n  },\n  \"at 4\": {\n    time: \"16:00\"\n  },\n  \"at 5\": {\n    time: \"17:00\"\n  },\n  \"at 6\": {\n    time: \"18:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"1\": {\n    time: \"13:00\"\n  },\n  \"2\": {\n    time: \"14:00\"\n  },\n  \"3\": {\n    time: \"15:00\"\n  },\n  \"4\": {\n    time: \"16:00\"\n  },\n  \"5\": {\n    time: \"17:00\"\n  },\n  \"6\": {\n    time: \"18:00\"\n  },\n  \"around 8\": {\n    time: \"08:00\"\n  },\n  \"around 9\": {\n    time: \"09:00\"\n  },\n  \"around 10\": {\n    time: \"10:00\"\n  },\n  \"around 11\": {\n    time: \"11:00\"\n  },\n  \"around 12\": {\n    time: \"12:00\"\n  },\n  \"around 1\": {\n    time: \"13:00\"\n  },\n  \"around 2\": {\n    time: \"14:00\"\n  },\n  \"around 3\": {\n    time: \"15:00\"\n  },\n  \"around 4\": {\n    time: \"16:00\"\n  },\n  \"around 5\": {\n    time: \"17:00\"\n  },\n  \"around 6\": {\n    time: \"18:00\"\n  },\n  \"I want to book an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"rendez-vous\": {\n    appointment: \"appointment\"\n  },\n  \"appointment\": {\n    appointment: \"appointment\"\n  },\n  \"Let's create an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"I want an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"appointment\": {\n    appointment: \"appointment\"\n  },\n  \"schedule\": {\n    appointment: \"appointment\"\n  },\n  \"to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"a to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"list\": {\n    todoitem: \"todoitem\"\n  },\n  \"Let's start a to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"I have something to do\": {\n    todoitem: \"todoitem\"\n  },\n  \"to do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"timer\": {\n    timer: \"timer\"\n  },\n  \"a timer\": {\n    timer: \"timer\"\n  },\n  \"start the timer\": {\n    timer: \"timer\"\n  },\n  \"ring\": {\n    timer: \"timer\"\n  },\n  \"minute\": {\n    timer: \"timer\"\n  }\n};\nconst answer = {\n  \"yes\": {\n    answer: \"yes\"\n  },\n  \"yeah\": {\n    answer: \"yes\"\n  },\n  \"sounds good\": {\n    answer: \"yes\"\n  },\n  \"of course\": {\n    answer: \"yes\"\n  },\n  \"probably\": {\n    answer: \"yes\"\n  },\n  \"it's fine\": {\n    answer: \"yes\"\n  },\n  \"no\": {\n    answer: \"no\"\n  },\n  \"I'm not sure\": {\n    answer: \"no\"\n  },\n  \"I don't think so\": {\n    answer: \"no\"\n  },\n  \"no way\": {\n    answer: \"no\"\n  },\n  \"absolutely not\": {\n    answer: \"no\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'query'\n      }\n    },\n    query: {\n      invoke: {\n        id: 'rasa',\n        initial: 'idle',\n        src: (context, event) => nluRequest(context.recResult),\n        onDone: {\n          target: 'choice',\n          actions: assign({\n            results: (context, event) => console.log(event.data)\n          })\n        },\n        onError: {\n          target: 'failure',\n          actions: assign({\n            errorMessage: (context, event) => console.log(event.data)\n          })\n        }\n      }\n    },\n    failure: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"There is an error, please retry later.\")\n        }\n      }\n    },\n    choice: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"appointment\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              appointment: grammar[context.recResult].appointment\n            };\n          }),\n          target: \"welcomeAppointment\"\n        }, {\n          cond: context => \"todoitem\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              todoitem: grammar[context.recResult].todoitem\n            };\n          }),\n          target: \"welcomeTodo\"\n        }, {\n          cond: context => \"timer\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              timer: grammar[context.recResult].timer\n            };\n          }),\n          target: \"welcomeTimer\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Please, choose between appointment, to do list and timer.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    welcomeAppointment: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment!\")\n        }\n      }\n    },\n    welcomeTodo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create a to-do list!\")\n        }\n      }\n    },\n    welcomeTimer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's start a timer!\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: 'On which day is your meeting?'\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, can you repeat?\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          //cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\n          cond: context => [context.recResult] ? [context.recResult].answer === 'agree' : false,\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmationWholeDay\"\n        }, {\n          //cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\n          cond: context => [context.recResult] ? [context.recResult].answer === 'refuse' : false,\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"regularConfirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    regularConfirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmationWholeDay: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","inspect","url","iframe","getDataFromAPI","userId","fetch","then","data","json","say","text","_context","type","value","listen","grammar","person","day","time","appointment","todoitem","timer","answer","dmMachine","initial","states","init","on","CLICK","query","invoke","id","src","context","event","nluRequest","recResult","onDone","target","actions","results","console","log","onError","errorMessage","failure","ENDSPEECH","prompt","entry","choice","RECOGNISED","cond","ask","nomatch","welcomeAppointment","welcomeTodo","welcomeTimer","who","duration","agree","refuse","regularConfirmation","confirmationWholeDay","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\n\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nconst getDataFromAPI = (userId) =>\r\n    fetch(`https://nlu-heroku.herokuapp.com/`).then(data => data.json());\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string, appointment?: string, todoitem?: string, timer?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"next Monday\": { day: \"Monday\" },\r\n    \"next Tuesday\": { day: \"Tuesday\" },\r\n    \"next Wednesday\": { day: \"Wednesday\" },\r\n    \"next Thursday\": { day: \"Thursday\" },\r\n    \"next Friday\": { day: \"Friday\" },\r\n    \"next Saturday\": { day: \"Saturday\" },\r\n    \"next Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"it's at 8\": { time: \"08:00\" },\r\n    \"it's at 9\": { time: \"09:00\" },\r\n    \"it's at 10\": { time: \"10:00\" },\r\n    \"it's at 11\": { time: \"11:00\" },\r\n    \"it's at 12\": { time: \"12:00\" },\r\n    \"it's at 1\": { time: \"13:00\" },\r\n    \"it's at 2\": { time: \"14:00\" },\r\n    \"it's at 3\": { time: \"15:00\" },\r\n    \"it's at 4\": { time: \"16:00\" },\r\n    \"it's at 5\": { time: \"17:00\" },\r\n    \"it's at 6\": { time: \"18:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"13:00\" },\r\n    \"2\": { time: \"14:00\" },\r\n    \"3\": { time: \"15:00\" },\r\n    \"4\": { time: \"16:00\" },\r\n    \"5\": { time: \"17:00\" },\r\n    \"6\": { time: \"18:00\" },\r\n    \"around 8\": { time: \"08:00\" },\r\n    \"around 9\": { time: \"09:00\" },\r\n    \"around 10\": { time: \"10:00\" },\r\n    \"around 11\": { time: \"11:00\" },\r\n    \"around 12\": { time: \"12:00\" },\r\n    \"around 1\": { time: \"13:00\" },\r\n    \"around 2\": { time: \"14:00\" },\r\n    \"around 3\": { time: \"15:00\" },\r\n    \"around 4\": { time: \"16:00\" },\r\n    \"around 5\": { time: \"17:00\" },\r\n    \"around 6\": { time: \"18:00\" },\r\n    \"I want to book an appointment\": { appointment: \"appointment\" },\r\n    \"rendez-vous\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"Let's create an appointment\": { appointment: \"appointment\" },\r\n    \"I want an appointment\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"schedule\": { appointment: \"appointment\" },\r\n    \"to-do list\": { todoitem: \"todoitem\" },\r\n    \"a to-do list\": { todoitem: \"todoitem\" },\r\n    \"list\": { todoitem: \"todoitem\" },\r\n    \"Let's start a to-do list\": { todoitem: \"todoitem\" },\r\n    \"I have something to do\": { todoitem: \"todoitem\" },\r\n    \"to do list\": { todoitem: \"todoitem\" },\r\n    \"timer\": { timer: \"timer\" },\r\n    \"a timer\": { timer: \"timer\" },\r\n    \"start the timer\": { timer: \"timer\" },\r\n    \"ring\": { timer: \"timer\" },\r\n    \"minute\": { timer: \"timer\" },\r\n}\r\n\r\nconst answer: { [index: string]: { answer: string }} = {\r\n    \"yes\": { answer: \"yes\" },\r\n    \"yeah\": { answer: \"yes\" },\r\n    \"sounds good\": { answer: \"yes\" },\r\n    \"of course\": { answer: \"yes\" },\r\n    \"probably\": { answer: \"yes\" },\r\n    \"it's fine\": { answer: \"yes\" },\r\n    \"no\": { answer: \"no\" },\r\n    \"I'm not sure\": { answer: \"no\" },\r\n    \"I don't think so\": { answer: \"no\" },\r\n    \"no way\": { answer: \"no\" },\r\n    \"absolutely not\": { answer: \"no\" },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'query'\r\n            }\r\n        },\r\n        query: {\r\n            invoke: {\r\n                id: 'rasa',\r\n                initial: 'idle',\r\n                src: (context, event) => nluRequest(context.recResult),\r\n                onDone: {\r\n                    target: 'choice',\r\n                    actions: assign({ results: (context, event) => console.log(event.data) })\r\n                },\r\n                onError: {\r\n                    target: 'failure',\r\n                    actions: assign({ errorMessage: (context, event) => console.log(event.data) })\r\n                }\r\n            }\r\n        },\r\n        failure: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"There is an error, please retry later.\") }\r\n            }\r\n        },\r\n        choice: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"appointment\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { appointment: grammar[ context.recResult].appointment } }),\r\n                    target: \"welcomeAppointment\"\r\n                },\r\n                {\r\n                    cond: (context) => \"todoitem\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { todoitem: grammar[ context.recResult].todoitem } }),\r\n                    target: \"welcomeTodo\"\r\n                },\r\n                {\r\n                    cond: (context) => \"timer\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { timer: grammar[ context.recResult].timer } }),\r\n                    target: \"welcomeTimer\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What would you like to do?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please, choose between appointment, to do list and timer.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        welcomeAppointment: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment!\") }\r\n            }\r\n        },\r\n        welcomeTodo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create a to-do list!\") }\r\n            }\r\n        },\r\n        welcomeTimer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's start a timer!\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'On which day is your meeting?',\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, can you repeat?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    //cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    cond: (context) => [context.recResult] ? [context.recResult].answer === 'agree' : false,\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    //cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    cond: (context) => [context.recResult] ? [context.recResult].answer === 'refuse' : false,\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}