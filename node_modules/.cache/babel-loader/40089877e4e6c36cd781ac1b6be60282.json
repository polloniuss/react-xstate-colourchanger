{"ast":null,"code":"import{send,assign}from\"xstate\";function say(text){return send(_context=>({type:\"SPEAK\",value:text}));}function listen(){return send('LISTEN');}const grammar={\"John\":{person:\"John Appleseed\"},\"Mary\":{person:\"Mary Orangeseed\"},\"Dan\":{person:\"Dan Cherryseed\"},\"Steve\":{person:\"Steve Strawberryseed\"},\"Klaus\":{person:\"Klaus Pearseed\"},\"Gus\":{person:\"Gus Bananaseed\"},\"Jennifer\":{person:\"Jennifer Pineappleseed\"},\"on Monday\":{day:\"Monday\"},\"on Tuesday\":{day:\"Tuesday\"},\"on Wednesday\":{day:\"Wednesday\"},\"on Thursday\":{day:\"Thursday\"},\"on Friday\":{day:\"Friday\"},\"on Saturday\":{day:\"Saturday\"},\"on Sunday\":{day:\"Sunday\"},\"at eight\":{time:\"08:00\"},\"at nine\":{time:\"09:00\"},\"at ten\":{time:\"10:00\"},\"at eleven\":{time:\"11:00\"},\"at noon\":{time:\"12:00\"},\"at one\":{time:\"13:00\"},\"at two\":{time:\"14:00\"},\"at three\":{time:\"15:00\"},\"at four\":{time:\"16:00\"},\"at five\":{time:\"17:00\"},\"at six\":{time:\"18:00\"},\"at seven\":{time:\"19:00\"},\"yes\":{agree:\"yes\"},\"no\":{refuse:\"no\"},\"of course\":{agree:\"yes\"},\"no way\":{refuse:\"no\"}};export const dmMachine={initial:'init',states:{init:{on:{CLICK:'welcome'}},welcome:{initial:\"prompt\",on:{ENDSPEECH:\"who\"},states:{prompt:{entry:say(\"Let's create an appointment\")}}},who:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"person\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{person:grammar[context.recResult].person};}),target:\"day\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Who are you meeting with?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't know them\"),on:{ENDSPEECH:\"prompt\"}}}},day:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"day\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{day:grammar[context.recResult].day};}),target:\"duration\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"On which day is your meeting?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't understand what you mean\"),on:{ENDSPEECH:\"prompt\"}}}},duration:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"agree\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{agree:grammar[context.recResult].agree};}),target:\"confirmationWholeDay\"},{cond:context=>\"refuse\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{refuse:grammar[context.recResult].refuse};}),target:\"time\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Will it take the whole day?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't understand what you mean\"),on:{ENDSPEECH:\"prompt\"}}}},time:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"time\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{time:grammar[context.recResult].time};}),target:\"regularConfirmation\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"What time is your meeting?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't understand what you mean\"),on:{ENDSPEECH:\"prompt\"}}}},regularConfirmation:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"agree\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{agree:grammar[context.recResult].agree};}),target:\"confirmation\"},{cond:context=>\"refuse\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{refuse:grammar[context.recResult].refuse};}),target:\"who\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Do you want me to create an appointment with (name) on (date) at (time)?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't understand what you mean\"),on:{ENDSPEECH:\"prompt\"}}}},confirmationWholeDay:{initial:\"prompt\",on:{RECOGNISED:[{cond:context=>\"agree\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{agree:grammar[context.recResult].agree};}),target:\"confirmation\"},{cond:context=>\"refuse\"in(grammar[context.recResult]||{}),actions:assign(context=>{return{refuse:grammar[context.recResult].refuse};}),target:\"who\"},{target:\".nomatch\"}]},states:{prompt:{entry:say(\"Do you want me to create an appointment with (name) on (date) for the whole day?\"),on:{ENDSPEECH:\"ask\"}},ask:{entry:listen()},nomatch:{entry:say(\"Sorry I don't understand what you mean\"),on:{ENDSPEECH:\"prompt\"}}}},confirmation:{initial:\"prompt\",on:{ENDSPEECH:\"init\"},states:{prompt:{entry:say(\"Your appointment has been created!\")}}}}};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","say","text","_context","type","value","listen","grammar","person","day","time","agree","refuse","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","duration","regularConfirmation","confirmationWholeDay","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at noon\": { time: \"12:00\" },\r\n    \"at one\": { time: \"13:00\" },\r\n    \"at two\": { time: \"14:00\" },\r\n    \"at three\": { time: \"15:00\" },\r\n    \"at four\": { time: \"16:00\" },\r\n    \"at five\": { time: \"17:00\" },\r\n    \"at six\": { time: \"18:00\" },\r\n    \"at seven\": { time: \"19:00\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"no way\": { refuse: \"no\" },\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"On which day is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Do you want me to create an appointment with (name) on (date) at (time)?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Do you want me to create an appointment with (name) on (date) for the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}