{"ast":null,"code":"import _objectSpread from \"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/homeGrammar.ts';\nconst gram = loadGrammar(grammar);\nconst input = \"turn off the light\";\nconst prs = parse(input.split(/\\s+/), gram);\nconst result = prs.resultsForRule(gram.$root)[0];\nconsole.log(result);\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction promptAndAsk(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: send('LISTEN')\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: _objectSpread({\n      on: {\n        RECOGNISED: {\n          target: 'query',\n          actions: assign(context => {\n            return {\n              query: context.recResult\n            };\n          })\n        }\n      }\n    }, promptAndAsk(\"What are you looking for?\")),\n    query: {\n      invoke: {\n        id: 'duck',\n        src: (context, event) => duckQuery(context.query),\n        onDone: {\n          target: 'answer',\n          actions: [assign((context, event) => {\n            return {\n              snippet: event.data.AbstractText\n            };\n          }), (context, event) => console.log(event.data)]\n        },\n        onError: {\n          target: 'welcome',\n          actions: (context, event) => console.log(event.data)\n        }\n      }\n    },\n    answer: {\n      entry: saySnippet,\n      on: {\n        ENDSPEECH: 'init'\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","inspect","url","iframe","loadGrammar","parse","grammar","gram","input","prs","split","result","resultsForRule","$root","console","log","say","text","_context","type","value","listen","promptAndAsk","prompt","initial","states","entry","on","ENDSPEECH","ask","dmMachine","init","CLICK","welcome","RECOGNISED","target","actions","context","query","recResult","invoke","id","src","event","duckQuery","onDone","snippet","data","AbstractText","onError","answer","saySnippet"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\n\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/homeGrammar.ts'\r\n\r\nconst gram = loadGrammar(grammar)\r\nconst input = \"turn off the light\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = prs.resultsForRule(gram.$root)[0]\r\nconsole.log(result)\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n\t\tentry: say(prompt),\r\n\t\ton: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\tentry: send('LISTEN'),\r\n            },\r\n\t}})\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n\twelcome: {\r\n\t    on: {\r\n\t\tRECOGNISED: {\r\n\t\t    target: 'query',\r\n\t\t    actions: assign((context) => { return { query: context.recResult } }),\r\n                }\r\n            },\r\n\t    ...promptAndAsk(\"What are you looking for?\")\r\n\t},\r\n\tquery: {\r\n\t    invoke: {\r\n\t\tid: 'duck',\r\n                src: (context, event) => duckQuery(context.query),\r\n                onDone: {\r\n                    target: 'answer',\r\n                    actions: [assign((context, event) => { return {snippet: event.data.AbstractText }}),\r\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n\t\tonError: {\r\n                    target: 'welcome',\r\n\t\t    actions: (context,event) => console.log(event.data)\r\n                }\r\n            }\r\n\t},\r\n        answer: {\r\n\t    entry: saySnippet,\r\n\t    on: { ENDSPEECH: 'init' }\r\n\t}\r\n    }})"]},"metadata":{},"sourceType":"module"}