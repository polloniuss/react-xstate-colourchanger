{"ast":null,"code":"var __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nimport { useState, useEffect, useRef, useCallback } from 'react';\nexport function useActor(actorRef, getSnapshot) {\n  if (getSnapshot === void 0) {\n    getSnapshot = function getSnapshot(a) {\n      return 'state' in a ? a.state : undefined;\n    };\n  } // const actor = useMemo(() => resolveActor(actorLike), [actorLike]);\n\n\n  var deferredEventsRef = useRef([]);\n\n  var _a = __read(useState(function () {\n    return getSnapshot(actorRef);\n  }), 2),\n      current = _a[0],\n      setCurrent = _a[1];\n\n  var send = useCallback(function (event) {\n    // If the previous actor is a deferred actor,\n    // queue the events so that they can be replayed\n    // on the non-deferred actor.\n    if ('deferred' in actorRef && actorRef.deferred) {\n      deferredEventsRef.current.push(event);\n    } else {\n      actorRef.send(event);\n    }\n  }, [actorRef]);\n  useEffect(function () {\n    setCurrent(getSnapshot(actorRef));\n    var subscription = actorRef.subscribe(setCurrent); // Dequeue deferred events from the previous deferred actorRef\n\n    while (deferredEventsRef.current.length > 0) {\n      var deferredEvent = deferredEventsRef.current.shift();\n      actorRef.send(deferredEvent);\n    }\n\n    return function () {\n      subscription.unsubscribe();\n    };\n  }, [actorRef]);\n  return [current, send];\n}","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/node_modules/@xstate/react/es/useActor.js"],"names":["__read","o","n","m","Symbol","iterator","i","call","r","ar","e","next","done","push","value","error","useState","useEffect","useRef","useCallback","useActor","actorRef","getSnapshot","a","state","undefined","deferredEventsRef","_a","current","setCurrent","send","event","deferred","subscription","subscribe","length","deferredEvent","shift","unsubscribe"],"mappings":"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","sourcesContent":["var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { useState, useEffect, useRef, useCallback } from 'react';\nexport function useActor(actorRef, getSnapshot) {\n    if (getSnapshot === void 0) { getSnapshot = function (a) {\n        return 'state' in a ? a.state : undefined;\n    }; }\n    // const actor = useMemo(() => resolveActor(actorLike), [actorLike]);\n    var deferredEventsRef = useRef([]);\n    var _a = __read(useState(function () { return getSnapshot(actorRef); }), 2), current = _a[0], setCurrent = _a[1];\n    var send = useCallback(function (event) {\n        // If the previous actor is a deferred actor,\n        // queue the events so that they can be replayed\n        // on the non-deferred actor.\n        if ('deferred' in actorRef && actorRef.deferred) {\n            deferredEventsRef.current.push(event);\n        }\n        else {\n            actorRef.send(event);\n        }\n    }, [actorRef]);\n    useEffect(function () {\n        setCurrent(getSnapshot(actorRef));\n        var subscription = actorRef.subscribe(setCurrent);\n        // Dequeue deferred events from the previous deferred actorRef\n        while (deferredEventsRef.current.length > 0) {\n            var deferredEvent = deferredEventsRef.current.shift();\n            actorRef.send(deferredEvent);\n        }\n        return function () {\n            subscription.unsubscribe();\n        };\n    }, [actorRef]);\n    return [current, send];\n}\n"]},"metadata":{},"sourceType":"module"}