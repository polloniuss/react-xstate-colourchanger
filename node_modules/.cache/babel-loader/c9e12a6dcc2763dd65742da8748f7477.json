{"ast":null,"code":"import { createMachine, assign } from 'xstate';\nimport { stringify } from './utils.js';\n\nfunction createInspectMachine(devTools) {\n  if (devTools === void 0) {\n    devTools = globalThis.__xstate__;\n  }\n\n  var serviceMap = new Map(); // Listen for services being registered and index them\n  // by their sessionId for quicker lookup\n\n  var sub = devTools.onRegister(function (service) {\n    serviceMap.set(service.sessionId, service);\n  });\n  return createMachine({\n    initial: 'pendingConnection',\n    context: {\n      client: undefined\n    },\n    states: {\n      pendingConnection: {},\n      connected: {\n        on: {\n          'service.state': {\n            actions: function actions(ctx, e) {\n              return ctx.client.send(e);\n            }\n          },\n          'service.event': {\n            actions: function actions(ctx, e) {\n              return ctx.client.send(e);\n            }\n          },\n          'service.register': {\n            actions: function actions(ctx, e) {\n              return ctx.client.send(e);\n            }\n          },\n          'service.stop': {\n            actions: function actions(ctx, e) {\n              return ctx.client.send(e);\n            }\n          },\n          'xstate.event': {\n            actions: function actions(_, e) {\n              var event = e.event;\n              var scxmlEventObject = JSON.parse(event);\n              var service = serviceMap.get(scxmlEventObject.origin);\n              service === null || service === void 0 ? void 0 : service.send(scxmlEventObject);\n            }\n          },\n          unload: {\n            actions: function actions(ctx) {\n              ctx.client.send({\n                type: 'xstate.disconnect'\n              });\n            }\n          },\n          disconnect: 'disconnected'\n        }\n      },\n      disconnected: {\n        entry: function entry() {\n          sub.unsubscribe();\n        },\n        type: 'final'\n      }\n    },\n    on: {\n      'xstate.inspecting': {\n        target: '.connected',\n        actions: [assign({\n          client: function client(_, e) {\n            return e.client;\n          }\n        }), function (ctx) {\n          devTools.services.forEach(function (service) {\n            var _a;\n\n            (_a = ctx.client) === null || _a === void 0 ? void 0 : _a.send({\n              type: 'service.register',\n              machine: stringify(service.machine),\n              state: stringify(service.state || service.initialState),\n              sessionId: service.sessionId\n            });\n          });\n        }]\n      }\n    }\n  });\n}\n\nexport { createInspectMachine };","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/own_project/react-xstate-colourchanger/node_modules/@xstate/inspect/es/inspectMachine.js"],"names":["createMachine","assign","stringify","createInspectMachine","devTools","globalThis","__xstate__","serviceMap","Map","sub","onRegister","service","set","sessionId","initial","context","client","undefined","states","pendingConnection","connected","on","actions","ctx","e","send","_","event","scxmlEventObject","JSON","parse","get","origin","unload","type","disconnect","disconnected","entry","unsubscribe","target","services","forEach","_a","machine","state","initialState"],"mappings":"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","sourcesContent":["import { createMachine, assign } from 'xstate';\r\nimport { stringify } from './utils.js';\r\n\r\nfunction createInspectMachine(devTools) {\r\n    if (devTools === void 0) { devTools = globalThis.__xstate__; }\r\n    var serviceMap = new Map();\r\n    // Listen for services being registered and index them\r\n    // by their sessionId for quicker lookup\r\n    var sub = devTools.onRegister(function (service) {\r\n        serviceMap.set(service.sessionId, service);\r\n    });\r\n    return createMachine({\r\n        initial: 'pendingConnection',\r\n        context: {\r\n            client: undefined\r\n        },\r\n        states: {\r\n            pendingConnection: {},\r\n            connected: {\r\n                on: {\r\n                    'service.state': {\r\n                        actions: function (ctx, e) { return ctx.client.send(e); }\r\n                    },\r\n                    'service.event': {\r\n                        actions: function (ctx, e) { return ctx.client.send(e); }\r\n                    },\r\n                    'service.register': {\r\n                        actions: function (ctx, e) { return ctx.client.send(e); }\r\n                    },\r\n                    'service.stop': {\r\n                        actions: function (ctx, e) { return ctx.client.send(e); }\r\n                    },\r\n                    'xstate.event': {\r\n                        actions: function (_, e) {\r\n                            var event = e.event;\r\n                            var scxmlEventObject = JSON.parse(event);\r\n                            var service = serviceMap.get(scxmlEventObject.origin);\r\n                            service === null || service === void 0 ? void 0 : service.send(scxmlEventObject);\r\n                        }\r\n                    },\r\n                    unload: {\r\n                        actions: function (ctx) {\r\n                            ctx.client.send({ type: 'xstate.disconnect' });\r\n                        }\r\n                    },\r\n                    disconnect: 'disconnected'\r\n                }\r\n            },\r\n            disconnected: {\r\n                entry: function () {\r\n                    sub.unsubscribe();\r\n                },\r\n                type: 'final'\r\n            }\r\n        },\r\n        on: {\r\n            'xstate.inspecting': {\r\n                target: '.connected',\r\n                actions: [\r\n                    assign({\r\n                        client: function (_, e) { return e.client; }\r\n                    }),\r\n                    function (ctx) {\r\n                        devTools.services.forEach(function (service) {\r\n                            var _a;\r\n                            (_a = ctx.client) === null || _a === void 0 ? void 0 : _a.send({\r\n                                type: 'service.register',\r\n                                machine: stringify(service.machine),\r\n                                state: stringify(service.state || service.initialState),\r\n                                sessionId: service.sessionId\r\n                            });\r\n                        });\r\n                    }\r\n                ]\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nexport { createInspectMachine };\r\n"]},"metadata":{},"sourceType":"module"}