{"ast":null,"code":"import _objectSpread from \"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { assign, actions } from \"xstate\";\nconst send = actions.send,\n      cancel = actions.cancel;\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { nluRequest } from \"./index.tsx\";\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction prompt(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt)\n      }\n    }\n  };\n}\n\nfunction promptAndAsk(prompt, nomatch, help) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt),\n        on: {\n          ENDSPEECH: 'ask'\n        }\n      },\n      ask: {\n        entry: [send('LISTEN'), send('MAXSPEECH', {\n          delay: 8000,\n          id: 'maxsp'\n        })]\n      },\n      nomatch: {\n        entry: say(nomatch),\n        on: {\n          ENDSPEECH: [{\n            actions: cancel('maxsp'),\n            target: \"prompt\"\n          }]\n        }\n      },\n      help: {\n        entry: say(help),\n        on: {\n          ENDSPEECH: [{\n            actions: cancel('maxsp'),\n            target: \"prompt\"\n          }]\n        }\n      }\n    }\n  };\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'start'\n      }\n    },\n    start: {\n      initial: 'welcome',\n      on: {\n        MAXSPEECH: [{\n          cond: context => context.counter === 1,\n          target: \"second_call\"\n        }, {\n          cond: context => context.counter === 2,\n          target: \"last_call\"\n        }, {\n          target: \"first_call\"\n        }]\n      },\n      states: {\n        hist: {\n          type: 'history'\n        },\n        welcome: _objectSpread({\n          on: {\n            RECOGNISED: {\n              target: 'query'\n            }\n          }\n        }, promptAndAsk(\"Knock knock. Who's there?.\")),\n        query: {\n          invoke: {\n            id: 'rasa',\n            src: (context, event) => nluRequest(context.recResult),\n            onDone: {\n              actions: assign((context, event) => {\n                return {\n                  nluData: event.data\n                };\n              }),\n              target: 'rasaChoice'\n            },\n            onError: {\n              actions: assign({\n                errorMessage: (context, event) => console.log(event.data)\n              }),\n              target: 'failure'\n            }\n          }\n        },\n        failure: {\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: \"welcome\"\n          },\n          states: {\n            prompt: {\n              entry: say(\"There is an error. Please check your proxy, your browser or retry later.\")\n            }\n          }\n        },\n        rasaChoice: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            ENDSPEECH: [{\n              cond: context => context.nluData.intent.name === 'appointment',\n              target: \"appointment\"\n            }, {\n              cond: context => context.nluData.intent.name === 'TODO_item',\n              target: \"todo\"\n            }, {\n              cond: context => context.nluData.intent.name === 'timer',\n              target: \"timer\"\n            }, {\n              target: \"welcome\"\n            }]\n          }\n        }, prompt(\"Actualization.\")),\n        appointment: _objectSpread(_objectSpread({}, prompt(\"Okay, let's create an appointment!\")), {}, {\n          on: {\n            ENDSPEECH: \"who\"\n          }\n        }),\n        todo: _objectSpread(_objectSpread({}, prompt(\"Let's create a to-do list!\")), {}, {\n          on: {\n            ENDSPEECH: \"welcome\"\n          }\n        }),\n        timer: _objectSpread(_objectSpread({}, prompt(\"Let's start a timer!\")), {}, {\n          on: {\n            ENDSPEECH: \"welcome\"\n          }\n        }),\n        who: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"person\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  person: dict[context.recResult].person\n                };\n              }), cancel('maxsp')],\n              target: \"day\"\n            }, {\n              cond: context => \"help\" in (dict[context.recResult] || {}),\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(\"Who are you meeting with?\", \"Sorry, I don't know them.\", \"You can say Jennifer or John for example.\")),\n        day: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"day\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  day: dict[context.recResult].day\n                };\n              }), cancel('maxsp')],\n              target: \"duration\"\n            }, {\n              cond: context => \"help\" in (dict[context.recResult] || {}),\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: 'On which day is your meeting?'\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 8000,\n                id: 'maxsp'\n              })]\n            },\n            help: {\n              entry: say(\"You can say monday, tuesday and so on.\"),\n              on: {\n                ENDSPEECH: [{\n                  actions: cancel('maxsp'),\n                  target: \"prompt\"\n                }]\n              }\n            },\n            nomatch: {\n              entry: say(\"Sorry, can you repeat?\"),\n              on: {\n                ENDSPEECH: [{\n                  actions: cancel('maxsp'),\n                  target: \"prompt\"\n                }]\n              }\n            }\n          }\n        },\n        duration: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"agree\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  agree: dict[context.recResult].agree\n                };\n              }), cancel('maxsp')],\n              target: \"confirmationWholeDay\"\n            }, {\n              cond: context => \"refuse\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  refuse: dict[context.recResult].refuse\n                };\n              }), cancel('maxsp')],\n              target: \"time\"\n            }, {\n              cond: context => \"help\" in (dict[context.recResult] || {}),\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(\"Will it take the whole day?\", \"Sorry, can you repeat?\", \"You can answer with yes or no.\")),\n        time: _objectSpread({\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"time\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  time: dict[context.recResult].time\n                };\n              }), cancel('maxsp')],\n              target: \"regularConfirmation\"\n            }, {\n              cond: context => \"help\" in (dict[context.recResult] || {}),\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          }\n        }, promptAndAsk(\"What time is your meeting?\", \"Sorry, can you repeat?\", \"You can choose between 8 to 12 or 1 to 6.\")),\n        regularConfirmation: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"agree\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  agree: dict[context.recResult].agree\n                };\n              }), cancel('maxsp')],\n              target: \"confirmation\"\n            }, {\n              cond: context => \"help\" in (dict[context.recResult] || {}),\n              target: \".help\"\n            }, {\n              cond: context => \"refuse\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  refuse: dict[context.recResult].refuse\n                };\n              }), cancel('maxsp')],\n              target: \"who\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 8000,\n                id: 'maxsp'\n              })]\n            },\n            help: {\n              entry: say(\"You can answer with yes or no.\"),\n              on: {\n                ENDSPEECH: [{\n                  actions: cancel('maxsp'),\n                  target: \"prompt\"\n                }]\n              }\n            },\n            nomatch: {\n              entry: say(\"Sorry can you repeat?\"),\n              on: {\n                ENDSPEECH: [{\n                  actions: cancel('maxsp'),\n                  target: \"prompt\"\n                }]\n              }\n            }\n          }\n        },\n        confirmationWholeDay: {\n          initial: \"prompt\",\n          on: {\n            RECOGNISED: [{\n              cond: context => \"agree\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  agree: dict[context.recResult].agree\n                };\n              }), cancel('maxsp')],\n              target: \"confirmation\"\n            }, {\n              cond: context => \"refuse\" in (dict[context.recResult] || {}),\n              actions: [assign(context => {\n                return {\n                  refuse: dict[context.recResult].refuse\n                };\n              }), cancel('maxsp')],\n              target: \"who\"\n            }, {\n              cond: context => \"help\" in (dict[context.recResult] || {}),\n              target: \".help\"\n            }, {\n              target: \".nomatch\"\n            }]\n          },\n          states: {\n            prompt: {\n              entry: send(context => ({\n                type: \"SPEAK\",\n                value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n              })),\n              on: {\n                ENDSPEECH: \"ask\"\n              }\n            },\n            ask: {\n              entry: [send('LISTEN'), send('MAXSPEECH', {\n                delay: 8000,\n                id: 'maxsp'\n              })]\n            },\n            help: {\n              entry: say(\"You can answer with yes or no.\"),\n              on: {\n                ENDSPEECH: [{\n                  actions: cancel('maxsp'),\n                  target: \"prompt\"\n                }]\n              }\n            },\n            nomatch: {\n              entry: say(\"Sorry can you repeat?\"),\n              on: {\n                ENDSPEECH: [{\n                  actions: cancel('maxsp'),\n                  target: \"prompt\"\n                }]\n              }\n            }\n          }\n        },\n        confirmation: _objectSpread(_objectSpread({}, prompt(\"Your appointment has been created!\")), {}, {\n          on: {\n            ENDSPEECH: \"welcome\"\n          }\n        })\n      }\n    },\n    first_call: {\n      entry: say(\"Come on that's an easy task, stop eating and focus on my question.\"),\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.counter === 1,\n          target: \"#root.dm.start.hist\"\n        }, {\n          cond: context => context.counter === 2,\n          target: \"#root.dm.start.hist\"\n        }, {\n          cond: context => context.counter === 3,\n          target: \"#root.dm.start.hist\"\n        }]\n      }\n    },\n    second_call: {\n      entry: say(\"Not too close, you're spiting on me.\"),\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.counter === 1,\n          target: \"#root.dm.start.hist\"\n        }, {\n          cond: context => context.counter === 2,\n          target: \"#root.dm.start.hist\"\n        }, {\n          cond: context => context.counter === 3,\n          target: \"#root.dm.start.hist\"\n        }]\n      }\n    },\n    last_call: {\n      entry: say(\"Whatever, I don't want to listen anymore.\"),\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.counter === 1,\n          target: \"#root.dm.start.hist\"\n        }, {\n          cond: context => context.counter === 2,\n          target: \"#root.dm.start.hist\"\n        }, {\n          cond: context => context.counter === 3,\n          target: \"#root.dm.start.hist\"\n        }]\n      }\n    }\n  }\n};\nconst dict = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Orangeseed\"\n  },\n  \"Dan\": {\n    person: \"Dan Cherryseed\"\n  },\n  \"Steve\": {\n    person: \"Steve Strawberryseed\"\n  },\n  \"Klaus\": {\n    person: \"Klaus Pearseed\"\n  },\n  \"Gus\": {\n    person: \"Gus Bananaseed\"\n  },\n  \"Jennifer\": {\n    person: \"Jennifer Pineappleseed\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"next Monday\": {\n    day: \"Monday\"\n  },\n  \"next Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"next Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"next Thursday\": {\n    day: \"Thursday\"\n  },\n  \"next Friday\": {\n    day: \"Friday\"\n  },\n  \"next Saturday\": {\n    day: \"Saturday\"\n  },\n  \"next Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"it's at 8\": {\n    time: \"08:00\"\n  },\n  \"it's at 9\": {\n    time: \"09:00\"\n  },\n  \"it's at 10\": {\n    time: \"10:00\"\n  },\n  \"it's at 11\": {\n    time: \"11:00\"\n  },\n  \"it's at 12\": {\n    time: \"12:00\"\n  },\n  \"it's at 1\": {\n    time: \"13:00\"\n  },\n  \"it's at 2\": {\n    time: \"14:00\"\n  },\n  \"it's at 3\": {\n    time: \"15:00\"\n  },\n  \"it's at 4\": {\n    time: \"16:00\"\n  },\n  \"it's at 5\": {\n    time: \"17:00\"\n  },\n  \"it's at 6\": {\n    time: \"18:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 1\": {\n    time: \"13:00\"\n  },\n  \"at 2\": {\n    time: \"14:00\"\n  },\n  \"at 3\": {\n    time: \"15:00\"\n  },\n  \"at 4\": {\n    time: \"16:00\"\n  },\n  \"at 5\": {\n    time: \"17:00\"\n  },\n  \"at 6\": {\n    time: \"18:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"1\": {\n    time: \"13:00\"\n  },\n  \"2\": {\n    time: \"14:00\"\n  },\n  \"3\": {\n    time: \"15:00\"\n  },\n  \"4\": {\n    time: \"16:00\"\n  },\n  \"5\": {\n    time: \"17:00\"\n  },\n  \"6\": {\n    time: \"18:00\"\n  },\n  \"around 8\": {\n    time: \"08:00\"\n  },\n  \"around 9\": {\n    time: \"09:00\"\n  },\n  \"around 10\": {\n    time: \"10:00\"\n  },\n  \"around 11\": {\n    time: \"11:00\"\n  },\n  \"around 12\": {\n    time: \"12:00\"\n  },\n  \"around 1\": {\n    time: \"13:00\"\n  },\n  \"around 2\": {\n    time: \"14:00\"\n  },\n  \"around 3\": {\n    time: \"15:00\"\n  },\n  \"around 4\": {\n    time: \"16:00\"\n  },\n  \"around 5\": {\n    time: \"17:00\"\n  },\n  \"around 6\": {\n    time: \"18:00\"\n  },\n  \"I want to book an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"rendez-vous\": {\n    appointment: \"appointment\"\n  },\n  \"appointment\": {\n    appointment: \"appointment\"\n  },\n  \"Let's create an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"I want an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"appointment\": {\n    appointment: \"appointment\"\n  },\n  \"schedule\": {\n    appointment: \"appointment\"\n  },\n  \"to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"a to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"list\": {\n    todoitem: \"todoitem\"\n  },\n  \"Let's start a to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"I have something to do\": {\n    todoitem: \"todoitem\"\n  },\n  \"to do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"timer\": {\n    timer: \"timer\"\n  },\n  \"a timer\": {\n    timer: \"timer\"\n  },\n  \"start the timer\": {\n    timer: \"timer\"\n  },\n  \"ring\": {\n    timer: \"timer\"\n  },\n  \"minute\": {\n    timer: \"timer\"\n  },\n  \"yes\": {\n    agree: \"yes\"\n  },\n  \"yeah\": {\n    agree: \"yes\"\n  },\n  \"sounds good\": {\n    agree: \"yes\"\n  },\n  \"of course\": {\n    agree: \"yes\"\n  },\n  \"probably\": {\n    agree: \"yes\"\n  },\n  \"it's fine\": {\n    agree: \"yes\"\n  },\n  \"no\": {\n    refuse: \"no\"\n  },\n  \"I'm not sure\": {\n    refuse: \"no\"\n  },\n  \"I don't think so\": {\n    refuse: \"no\"\n  },\n  \"no way\": {\n    refuse: \"no\"\n  },\n  \"absolutely not\": {\n    refuse: \"no\"\n  },\n  \"help\": {\n    help: \"help\"\n  },\n  \"I don't understand\": {\n    help: \"help\"\n  },\n  \"please help\": {\n    help: \"help\"\n  },\n  \"can you repeat\": {\n    help: \"help\"\n  },\n  \"let's go back\": {\n    help: \"help\"\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["assign","actions","send","cancel","inspect","url","iframe","nluRequest","say","text","_context","type","value","listen","prompt","initial","states","entry","promptAndAsk","nomatch","help","on","ENDSPEECH","ask","delay","id","target","dmMachine","init","CLICK","start","MAXSPEECH","cond","context","counter","hist","welcome","RECOGNISED","query","invoke","src","event","recResult","onDone","nluData","data","onError","errorMessage","console","log","failure","rasaChoice","intent","name","appointment","todo","timer","who","dict","person","day","duration","agree","refuse","time","regularConfirmation","confirmationWholeDay","confirmation","first_call","second_call","last_call","todoitem"],"mappings":"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","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\"\r\nconst { send, cancel } = actions\r\n\r\nimport { inspect } from '@xstate/inspect'\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nimport { nluRequest } from \"./index.tsx\"\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/quotesGrammar.ts'\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\nfunction prompt(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt)\r\n            }\r\n        }\r\n    })\r\n}\r\nfunction promptAndAsk(prompt: string, nomatch: string, help: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n                prompt: {\r\n                    entry: say(prompt),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: [send('LISTEN'), send('MAXSPEECH', { delay: 8000, id: 'maxsp' })]\r\n                },\r\n                nomatch: {\r\n                    entry: say(nomatch),\r\n                    on: { ENDSPEECH: [{ \r\n                            actions: cancel('maxsp'),\r\n                            target: \"prompt\" \r\n                    }] }\r\n                },\r\n                help: {\r\n                    entry: say(help),\r\n                    on: { ENDSPEECH: [{ \r\n                            actions: cancel('maxsp'),\r\n                            target: \"prompt\" \r\n                    }] }\r\n                }\r\n        }\r\n    })\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'start'\r\n            }\r\n        },\r\n        start: {\r\n            initial: 'welcome',\r\n            on: {\r\n                MAXSPEECH: [\r\n                    { \r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"second_call\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"last_call\"\r\n                    },\r\n                    { target: \"first_call\" }\r\n                ]\r\n            },\r\n            states: {\r\n                hist: { type: 'history' },\r\n                welcome: {\r\n                    on: { RECOGNISED: \r\n                        { target: 'query' }\r\n                    },\r\n                    ...promptAndAsk(\"Knock knock. Who's there?.\"),\r\n                },\r\n                query: {\r\n                    invoke: {\r\n                        id: 'rasa',\r\n                        src: (context, event) => nluRequest(context.recResult),\r\n                        onDone: {\r\n                            actions: assign((context, event) => { return { nluData: event.data }}),\r\n                            target: 'rasaChoice'\r\n                        },\r\n                        onError: {\r\n                            actions: assign({ errorMessage: (context, event) => console.log(event.data)}),\r\n                            target: 'failure',\r\n                        }\r\n                    }\r\n                },\r\n                failure: {\r\n                    initial: \"prompt\",\r\n                    on: { ENDSPEECH: \"welcome\" },\r\n                    states: {\r\n                        prompt: { entry: say(\"There is an error. Please check your proxy, your browser or retry later.\") }\r\n                    }\r\n                },\r\n                rasaChoice: {\r\n                    initial: \"prompt\",\r\n                    on: { ENDSPEECH: [{ \r\n                        cond: (context) =>  context.nluData.intent.name === 'appointment',\r\n                        target: \"appointment\"\r\n                        },\r\n                        { cond: (context) =>  context.nluData.intent.name === 'TODO_item',\r\n                            target: \"todo\"\r\n                        },\r\n                        { cond: (context) =>  context.nluData.intent.name === 'timer',\r\n                            target: \"timer\"\r\n                        },\r\n                        { target: \"welcome\" }]\r\n                    },\r\n                    ...prompt(\"Actualization.\"),\r\n                },\r\n                appointment: {\r\n                    ...prompt(\"Okay, let's create an appointment!\"),\r\n                    on: { ENDSPEECH: \"who\" },\r\n                },\r\n                todo: {\r\n                    ...prompt(\"Let's create a to-do list!\"),\r\n                    on: { ENDSPEECH: \"welcome\" },\r\n                },\r\n                timer: {\r\n                    ...prompt(\"Let's start a timer!\"),\r\n                    on: { ENDSPEECH: \"welcome\" },\r\n                },\r\n                who: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"person\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { person: dict[context.recResult].person } }), cancel('maxsp')],\r\n                            target: \"day\"\r\n\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }]\r\n                    },\r\n                    ...promptAndAsk(\"Who are you meeting with?\",\"Sorry, I don't know them.\", \"You can say Jennifer or John for example.\")\r\n                },\r\n                day: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"day\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { day: dict[context.recResult].day } }), cancel('maxsp')],\r\n                            target: \"duration\"\r\n\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: 'On which day is your meeting?',\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: [ \r\n                                send('LISTEN'),\r\n                                send('MAXSPEECH', { delay: 8000, id: 'maxsp' })\r\n                            ]\r\n                        },\r\n                        help: {\r\n                            entry: say(\"You can say monday, tuesday and so on.\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, can you repeat?\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                    }\r\n                },\r\n                duration: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"confirmationWholeDay\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"time\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                    },\r\n                    ...promptAndAsk(\"Will it take the whole day?\",\"Sorry, can you repeat?\", \"You can answer with yes or no.\")\r\n                },\r\n                time: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"time\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { time: dict[context.recResult].time } }), cancel('maxsp')],\r\n                            target: \"regularConfirmation\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }]\r\n                    },\r\n                    ...promptAndAsk(\"What time is your meeting?\",\"Sorry, can you repeat?\", \"You can choose between 8 to 12 or 1 to 6.\")\r\n                },\r\n                regularConfirmation: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"confirmation\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"who\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: [ \r\n                                send('LISTEN'),\r\n                                send('MAXSPEECH', { delay: 8000, id: 'maxsp' })\r\n                            ]\r\n                        },\r\n                        help: {\r\n                            entry: say(\"You can answer with yes or no.\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry can you repeat?\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                    }\r\n                },\r\n                confirmationWholeDay: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"confirmation\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"who\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: [ \r\n                                send('LISTEN'),\r\n                                send('MAXSPEECH', { delay: 8000, id: 'maxsp' })\r\n                            ]\r\n                        },\r\n                        help: {\r\n                            entry: say(\"You can answer with yes or no.\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry can you repeat?\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                    }\r\n                },\r\n                confirmation: {\r\n                    ...prompt(\"Your appointment has been created!\"),\r\n                    on: { ENDSPEECH: \"welcome\" }\r\n                }\r\n            }\r\n        },\r\n        first_call: {\r\n            entry: say(\"Come on that's an easy task, stop eating and focus on my question.\"),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 3,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n        second_call: {\r\n            entry: say(\"Not too close, you're spiting on me.\"),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 3,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n        last_call: {\r\n            entry: say(\"Whatever, I don't want to listen anymore.\"),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 3,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\nconst dict: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string, appointment?: string, todoitem?: string, timer?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"next Monday\": { day: \"Monday\" },\r\n    \"next Tuesday\": { day: \"Tuesday\" },\r\n    \"next Wednesday\": { day: \"Wednesday\" },\r\n    \"next Thursday\": { day: \"Thursday\" },\r\n    \"next Friday\": { day: \"Friday\" },\r\n    \"next Saturday\": { day: \"Saturday\" },\r\n    \"next Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"it's at 8\": { time: \"08:00\" },\r\n    \"it's at 9\": { time: \"09:00\" },\r\n    \"it's at 10\": { time: \"10:00\" },\r\n    \"it's at 11\": { time: \"11:00\" },\r\n    \"it's at 12\": { time: \"12:00\" },\r\n    \"it's at 1\": { time: \"13:00\" },\r\n    \"it's at 2\": { time: \"14:00\" },\r\n    \"it's at 3\": { time: \"15:00\" },\r\n    \"it's at 4\": { time: \"16:00\" },\r\n    \"it's at 5\": { time: \"17:00\" },\r\n    \"it's at 6\": { time: \"18:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"13:00\" },\r\n    \"2\": { time: \"14:00\" },\r\n    \"3\": { time: \"15:00\" },\r\n    \"4\": { time: \"16:00\" },\r\n    \"5\": { time: \"17:00\" },\r\n    \"6\": { time: \"18:00\" },\r\n    \"around 8\": { time: \"08:00\" },\r\n    \"around 9\": { time: \"09:00\" },\r\n    \"around 10\": { time: \"10:00\" },\r\n    \"around 11\": { time: \"11:00\" },\r\n    \"around 12\": { time: \"12:00\" },\r\n    \"around 1\": { time: \"13:00\" },\r\n    \"around 2\": { time: \"14:00\" },\r\n    \"around 3\": { time: \"15:00\" },\r\n    \"around 4\": { time: \"16:00\" },\r\n    \"around 5\": { time: \"17:00\" },\r\n    \"around 6\": { time: \"18:00\" },\r\n    \"I want to book an appointment\": { appointment: \"appointment\" },\r\n    \"rendez-vous\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"Let's create an appointment\": { appointment: \"appointment\" },\r\n    \"I want an appointment\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"schedule\": { appointment: \"appointment\" },\r\n    \"to-do list\": { todoitem: \"todoitem\" },\r\n    \"a to-do list\": { todoitem: \"todoitem\" },\r\n    \"list\": { todoitem: \"todoitem\" },\r\n    \"Let's start a to-do list\": { todoitem: \"todoitem\" },\r\n    \"I have something to do\": { todoitem: \"todoitem\" },\r\n    \"to do list\": { todoitem: \"todoitem\" },\r\n    \"timer\": { timer: \"timer\" },\r\n    \"a timer\": { timer: \"timer\" },\r\n    \"start the timer\": { timer: \"timer\" },\r\n    \"ring\": { timer: \"timer\" },\r\n    \"minute\": { timer: \"timer\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"yeah\": { agree: \"yes\" },\r\n    \"sounds good\": { agree: \"yes\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"probably\": { agree: \"yes\" },\r\n    \"it's fine\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"I'm not sure\": { refuse: \"no\" },\r\n    \"I don't think so\": { refuse: \"no\" },\r\n    \"no way\": { refuse: \"no\" },\r\n    \"absolutely not\": { refuse: \"no\" },\r\n    \"help\": { help: \"help\" },\r\n    \"I don't understand\": { help: \"help\" },\r\n    \"please help\": { help: \"help\" },\r\n    \"can you repeat\": { help: \"help\" },\r\n    \"let's go back\": { help: \"help\" },\r\n}"]},"metadata":{},"sourceType":"module"}