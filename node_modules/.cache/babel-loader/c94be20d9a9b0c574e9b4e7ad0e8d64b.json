{"ast":null,"code":"import _slicedToArray from\"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import\"./styles.scss\";import*as React from\"react\";import*as ReactDOM from\"react-dom\";import{Machine,assign,send}from\"xstate\";import{useMachine,asEffect}from\"@xstate/react\";import{inspect}from\"@xstate/inspect\";import{dmMachine}from\"./dmAppointment\";inspect({url:\"https://statecharts.io/inspect\",iframe:false});import{useSpeechSynthesis,useSpeechRecognition}from'react-speech-kit';import{jsx as _jsx}from\"react/jsx-runtime\";let count=0;const machine=Machine({id:'root',type:'parallel',states:{dm:_objectSpread({},dmMachine),asrtts:{initial:'idle',states:{idle:{on:{LISTEN:'recognising',SPEAK:{target:'speaking',actions:assign((_context,event)=>{return{ttsAgenda:event.value};})}}},recognising:{initial:'progress',entry:'recStart',exit:'recStop',on:{ASRRESULT:{actions:['recLogResult',assign((_context,event)=>{return{recResult:event.value};})],target:'.match'},RECOGNISED:'idle',MAXSPEECH:{actions:assign(context=>{if(context.counter){return{counter:context.counter+1};}else{return{counter:count+1};}}),target:'idle'}},states:{progress:{},match:{entry:send('RECOGNISED')}}},speaking:{entry:'ttsStart',on:{ENDSPEECH:'idle'}}}}}},{actions:{recLogResult:context=>{/* context.recResult = event.recResult; */console.log('<< ASR: '+context.recResult);},test:()=>{console.log('test');},logIntent:context=>{/* context.nluData = event.data */console.log('<< NLU intent: '+context.nluData.intent.name);}}});const ReactiveButton=props=>{switch(true){case props.state.matches({asrtts:'recognising'}):return/*#__PURE__*/_jsx(\"button\",_objectSpread(_objectSpread({type:\"button\",className:\"glow-on-hover\",style:{animation:\"glowing 20s linear\"}},props),{},{children:\"Listening...\"}));case props.state.matches({asrtts:'speaking'}):return/*#__PURE__*/_jsx(\"button\",_objectSpread(_objectSpread({type:\"button\",className:\"glow-on-hover\",style:{animation:\"bordering 1s infinite\"}},props),{},{children:\"Speaking...\"}));default:return/*#__PURE__*/_jsx(\"button\",_objectSpread(_objectSpread({type:\"button\",className:\"glow-on-hover\"},props),{},{children:\"Click to start\"}));}};function App(){const _useSpeechSynthesis=useSpeechSynthesis({onEnd:()=>{send('ENDSPEECH');}}),speak=_useSpeechSynthesis.speak,cancel=_useSpeechSynthesis.cancel,speaking=_useSpeechSynthesis.speaking;const _useSpeechRecognition=useSpeechRecognition({onResult:result=>{send({type:\"ASRRESULT\",value:result});}}),listen=_useSpeechRecognition.listen,listening=_useSpeechRecognition.listening,stop=_useSpeechRecognition.stop;const _useMachine=useMachine(machine,{devTools:true,actions:{recStart:asEffect(()=>{console.log('Listening...');listen({interimResults:false,continuous:true});}),recStop:asEffect(()=>{console.log('Recognition stopped.');stop();}),changeColour:asEffect(context=>{console.log('Repainting...');document.body.style.background=context.recResult;}),ttsStart:asEffect((context,effect)=>{console.log('Speaking...');speak({text:context.ttsAgenda});}),ttsCancel:asEffect((context,effect)=>{console.log('TTS STOP...');cancel();})/* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */}}),_useMachine2=_slicedToArray(_useMachine,3),current=_useMachine2[0],send=_useMachine2[1],service=_useMachine2[2];return/*#__PURE__*/_jsx(\"div\",{className:\"App\",children:/*#__PURE__*/_jsx(ReactiveButton,{state:current,onClick:()=>send('CLICK')})});};/* RASA API\r\n *  */const proxyurl=\"https://cors-anywhere.herokuapp.com/\";/*const rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'*/const rasaurl='https://nlu-heroku.herokuapp.com/model/parse/';export const nluRequest=text=>fetch(new Request(proxyurl+rasaurl,{method:'POST',//headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\nheaders:{'Origin':'http://localhost:3000/'},body:\"{\\\"text\\\": \\\"\".concat(text,\"\\\"}\")})).then(data=>data.json());const rootElement=document.getElementById(\"root\");ReactDOM.render(/*#__PURE__*/_jsx(App,{}),rootElement);","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/index.tsx"],"names":["React","ReactDOM","Machine","assign","send","useMachine","asEffect","inspect","dmMachine","url","iframe","useSpeechSynthesis","useSpeechRecognition","count","machine","id","type","states","dm","asrtts","initial","idle","on","LISTEN","SPEAK","target","actions","_context","event","ttsAgenda","value","recognising","entry","exit","ASRRESULT","recResult","RECOGNISED","MAXSPEECH","context","counter","progress","match","speaking","ENDSPEECH","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","animation","App","onEnd","speak","cancel","onResult","result","listen","listening","stop","devTools","recStart","interimResults","continuous","recStop","changeColour","document","body","style","background","ttsStart","effect","text","ttsCancel","current","service","proxyurl","rasaurl","nluRequest","fetch","Request","method","headers","then","data","json","rootElement","getElementById","render"],"mappings":"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","sourcesContent":["import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\nlet count = 0\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        MAXSPEECH: {\r\n                            actions: assign((context) => {\r\n                                if (context.counter) {\r\n                                    return { counter: context.counter + 1 }\r\n                                } else {\r\n                                    return { counter: count + 1 }\r\n                                }\r\n                            }),\r\n                            target: 'idle'\r\n                        },\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Listening...');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n/*const rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'*/\r\nconst rasaurl = 'https://nlu-heroku.herokuapp.com/model/parse/';\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        //headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        headers: { 'Origin': 'http://localhost:3000/' },\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"]},"metadata":{},"sourceType":"module"}