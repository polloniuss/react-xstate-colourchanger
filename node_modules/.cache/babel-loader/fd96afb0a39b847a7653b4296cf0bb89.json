{"ast":null,"code":"import _objectSpread from \"C:/Users/B\\xE9r\\xE9nice/Documents/nodeJS/react-xstate-colourchanger/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport { send, assign } from \"xstate\";\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\n\n/*\r\nconst gram = loadGrammar(grammar)\r\nconst input = \"to do is to be\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = prs.resultsForRule(gram.$root)[0]\r\nconsole.log(result)\r\n*/\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nfunction prompt(prompt) {\n  return {\n    initial: 'prompt',\n    states: {\n      prompt: {\n        entry: say(prompt)\n      }\n    }\n  };\n}\n\nimport { nluRequest } from \"./index.tsx\";\nconst dict = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Orangeseed\"\n  },\n  \"Dan\": {\n    person: \"Dan Cherryseed\"\n  },\n  \"Steve\": {\n    person: \"Steve Strawberryseed\"\n  },\n  \"Klaus\": {\n    person: \"Klaus Pearseed\"\n  },\n  \"Gus\": {\n    person: \"Gus Bananaseed\"\n  },\n  \"Jennifer\": {\n    person: \"Jennifer Pineappleseed\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"next Monday\": {\n    day: \"Monday\"\n  },\n  \"next Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"next Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"next Thursday\": {\n    day: \"Thursday\"\n  },\n  \"next Friday\": {\n    day: \"Friday\"\n  },\n  \"next Saturday\": {\n    day: \"Saturday\"\n  },\n  \"next Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"it's at 8\": {\n    time: \"08:00\"\n  },\n  \"it's at 9\": {\n    time: \"09:00\"\n  },\n  \"it's at 10\": {\n    time: \"10:00\"\n  },\n  \"it's at 11\": {\n    time: \"11:00\"\n  },\n  \"it's at 12\": {\n    time: \"12:00\"\n  },\n  \"it's at 1\": {\n    time: \"13:00\"\n  },\n  \"it's at 2\": {\n    time: \"14:00\"\n  },\n  \"it's at 3\": {\n    time: \"15:00\"\n  },\n  \"it's at 4\": {\n    time: \"16:00\"\n  },\n  \"it's at 5\": {\n    time: \"17:00\"\n  },\n  \"it's at 6\": {\n    time: \"18:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 1\": {\n    time: \"13:00\"\n  },\n  \"at 2\": {\n    time: \"14:00\"\n  },\n  \"at 3\": {\n    time: \"15:00\"\n  },\n  \"at 4\": {\n    time: \"16:00\"\n  },\n  \"at 5\": {\n    time: \"17:00\"\n  },\n  \"at 6\": {\n    time: \"18:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"1\": {\n    time: \"13:00\"\n  },\n  \"2\": {\n    time: \"14:00\"\n  },\n  \"3\": {\n    time: \"15:00\"\n  },\n  \"4\": {\n    time: \"16:00\"\n  },\n  \"5\": {\n    time: \"17:00\"\n  },\n  \"6\": {\n    time: \"18:00\"\n  },\n  \"around 8\": {\n    time: \"08:00\"\n  },\n  \"around 9\": {\n    time: \"09:00\"\n  },\n  \"around 10\": {\n    time: \"10:00\"\n  },\n  \"around 11\": {\n    time: \"11:00\"\n  },\n  \"around 12\": {\n    time: \"12:00\"\n  },\n  \"around 1\": {\n    time: \"13:00\"\n  },\n  \"around 2\": {\n    time: \"14:00\"\n  },\n  \"around 3\": {\n    time: \"15:00\"\n  },\n  \"around 4\": {\n    time: \"16:00\"\n  },\n  \"around 5\": {\n    time: \"17:00\"\n  },\n  \"around 6\": {\n    time: \"18:00\"\n  },\n  \"I want to book an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"rendez-vous\": {\n    appointment: \"appointment\"\n  },\n  \"appointment\": {\n    appointment: \"appointment\"\n  },\n  \"Let's create an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"I want an appointment\": {\n    appointment: \"appointment\"\n  },\n  \"appointment\": {\n    appointment: \"appointment\"\n  },\n  \"schedule\": {\n    appointment: \"appointment\"\n  },\n  \"to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"a to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"list\": {\n    todoitem: \"todoitem\"\n  },\n  \"Let's start a to-do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"I have something to do\": {\n    todoitem: \"todoitem\"\n  },\n  \"to do list\": {\n    todoitem: \"todoitem\"\n  },\n  \"timer\": {\n    timer: \"timer\"\n  },\n  \"a timer\": {\n    timer: \"timer\"\n  },\n  \"start the timer\": {\n    timer: \"timer\"\n  },\n  \"ring\": {\n    timer: \"timer\"\n  },\n  \"minute\": {\n    timer: \"timer\"\n  },\n  \"yes\": {\n    agree: \"yes\"\n  },\n  \"yeah\": {\n    agree: \"yes\"\n  },\n  \"sounds good\": {\n    agree: \"yes\"\n  },\n  \"of course\": {\n    agree: \"yes\"\n  },\n  \"probably\": {\n    agree: \"yes\"\n  },\n  \"it's fine\": {\n    agree: \"yes\"\n  },\n  \"no\": {\n    refuse: \"no\"\n  },\n  \"I'm not sure\": {\n    refuse: \"no\"\n  },\n  \"I don't think so\": {\n    refuse: \"no\"\n  },\n  \"no way\": {\n    refuse: \"no\"\n  },\n  \"absolutely not\": {\n    refuse: \"no\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          target: 'query'\n        }\n      },\n      states: {\n        prompt: {\n          entry: say(\"What would you like to do?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        }\n      }\n    },\n    query: {\n      invoke: {\n        id: 'rasa',\n        src: (context, event) => nluRequest(context.recResult),\n        onDone: {\n          actions: assign((context, event) => {\n            return {\n              nluData: event.data\n            };\n          }),\n          target: 'rasaChoice'\n        },\n        onError: {\n          actions: assign({\n            errorMessage: (context, event) => console.log(event.data)\n          }),\n          target: 'failure'\n        }\n      }\n    },\n    failure: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"There is an error. Please check your proxy, your browser or retry later.\")\n        }\n      }\n    },\n    rasaChoice: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: [{\n          cond: context => context.nluData.intent.name === 'appointment',\n          target: \"appointment\"\n        }, {\n          cond: context => context.nluData.intent.name === 'TODO_item',\n          target: \"todo\"\n        }, {\n          cond: context => context.nluData.intent.name === 'timer',\n          target: \"timer\"\n        }, {\n          target: \"welcome\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Actualization.\")\n        }\n      }\n    },\n\n    /*choice: {\r\n        initial: \"prompt\",\r\n        on: {\r\n            RECOGNISED: [{\r\n                //cond: (context) => \"appointment\" in (dict[context.recResult] || {}),\r\n                actions: assign((context) => { return { appointment: dict[ context.recResult].appointment } }),\r\n                target: \"appointment\"\r\n            },\r\n            {\r\n                //cond: (context) => \"todoitem\" in (dict[context.recResult] || {}),\r\n                actions: assign((context) => { return { todoitem: dict[ context.recResult].todoitem } }),\r\n                target: \"todo\"\r\n            },\r\n            {\r\n                //cond: (context) => \"timer\" in (dict[context.recResult] || {}),\r\n                actions: assign((context) => { return { timer: dict[ context.recResult].timer } }),\r\n                target: \"timer\"\r\n            },\r\n            { target: \".nomatch\" }]\r\n        },\r\n        states: {\r\n            prompt: {\r\n                entry: say(\"What would you like to do?\"),\r\n                on: { ENDSPEECH: \"ask\" }\r\n            },\r\n            ask: {\r\n                entry: listen()\r\n            },\r\n            nomatch: {\r\n                entry: say(\"Please, choose between appointment, to do list and timer.\"),\r\n                on: { ENDSPEECH: \"prompt\" }\r\n            }\r\n        }\r\n    },*/\n    appointment: _objectSpread(_objectSpread({}, prompt(\"Let's create an appointment!\")), {}, {\n      on: {\n        ENDSPEECH: \"who\"\n      }\n    }),\n    todo: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create a to-do list!\")\n        }\n      }\n    },\n    timer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's start a timer!\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: dict[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them.\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: dict[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: 'On which day is your meeting?'\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, can you repeat?\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: dict[context.recResult].agree\n            };\n          }),\n          target: \"confirmationWholeDay\"\n        }, {\n          cond: context => \"refuse\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: dict[context.recResult].refuse\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry, can you answer with yes or no?\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: dict[context.recResult].time\n            };\n          }),\n          target: \"regularConfirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry can you choose between 8 to 12 or 1 to 6?\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    regularConfirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: dict[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: dict[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry can you answer with yes or no?\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmationWholeDay: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: dict[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (dict[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: dict[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry can you answer with yes or no?\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","inspect","url","iframe","say","text","_context","type","value","listen","prompt","initial","states","entry","nluRequest","dict","person","day","time","appointment","todoitem","timer","agree","refuse","dmMachine","init","on","CLICK","welcome","RECOGNISED","target","ENDSPEECH","ask","query","invoke","id","src","context","event","recResult","onDone","actions","nluData","data","onError","errorMessage","console","log","failure","rasaChoice","cond","intent","name","todo","who","nomatch","duration","regularConfirmation","confirmationWholeDay","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/quotesGrammar.ts'\r\n\r\n/*\r\nconst gram = loadGrammar(grammar)\r\nconst input = \"to do is to be\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = prs.resultsForRule(gram.$root)[0]\r\nconsole.log(result)\r\n*/\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\nfunction prompt(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt)\r\n            }\r\n        }\r\n    })\r\n}\r\n\r\nimport { nluRequest } from \"./index.tsx\";\r\n\r\nconst dict: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string, appointment?: string, todoitem?: string, timer?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"next Monday\": { day: \"Monday\" },\r\n    \"next Tuesday\": { day: \"Tuesday\" },\r\n    \"next Wednesday\": { day: \"Wednesday\" },\r\n    \"next Thursday\": { day: \"Thursday\" },\r\n    \"next Friday\": { day: \"Friday\" },\r\n    \"next Saturday\": { day: \"Saturday\" },\r\n    \"next Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"it's at 8\": { time: \"08:00\" },\r\n    \"it's at 9\": { time: \"09:00\" },\r\n    \"it's at 10\": { time: \"10:00\" },\r\n    \"it's at 11\": { time: \"11:00\" },\r\n    \"it's at 12\": { time: \"12:00\" },\r\n    \"it's at 1\": { time: \"13:00\" },\r\n    \"it's at 2\": { time: \"14:00\" },\r\n    \"it's at 3\": { time: \"15:00\" },\r\n    \"it's at 4\": { time: \"16:00\" },\r\n    \"it's at 5\": { time: \"17:00\" },\r\n    \"it's at 6\": { time: \"18:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"13:00\" },\r\n    \"2\": { time: \"14:00\" },\r\n    \"3\": { time: \"15:00\" },\r\n    \"4\": { time: \"16:00\" },\r\n    \"5\": { time: \"17:00\" },\r\n    \"6\": { time: \"18:00\" },\r\n    \"around 8\": { time: \"08:00\" },\r\n    \"around 9\": { time: \"09:00\" },\r\n    \"around 10\": { time: \"10:00\" },\r\n    \"around 11\": { time: \"11:00\" },\r\n    \"around 12\": { time: \"12:00\" },\r\n    \"around 1\": { time: \"13:00\" },\r\n    \"around 2\": { time: \"14:00\" },\r\n    \"around 3\": { time: \"15:00\" },\r\n    \"around 4\": { time: \"16:00\" },\r\n    \"around 5\": { time: \"17:00\" },\r\n    \"around 6\": { time: \"18:00\" },\r\n    \"I want to book an appointment\": { appointment: \"appointment\" },\r\n    \"rendez-vous\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"Let's create an appointment\": { appointment: \"appointment\" },\r\n    \"I want an appointment\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"schedule\": { appointment: \"appointment\" },\r\n    \"to-do list\": { todoitem: \"todoitem\" },\r\n    \"a to-do list\": { todoitem: \"todoitem\" },\r\n    \"list\": { todoitem: \"todoitem\" },\r\n    \"Let's start a to-do list\": { todoitem: \"todoitem\" },\r\n    \"I have something to do\": { todoitem: \"todoitem\" },\r\n    \"to do list\": { todoitem: \"todoitem\" },\r\n    \"timer\": { timer: \"timer\" },\r\n    \"a timer\": { timer: \"timer\" },\r\n    \"start the timer\": { timer: \"timer\" },\r\n    \"ring\": { timer: \"timer\" },\r\n    \"minute\": { timer: \"timer\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"yeah\": { agree: \"yes\" },\r\n    \"sounds good\": { agree: \"yes\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"probably\": { agree: \"yes\" },\r\n    \"it's fine\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"I'm not sure\": { refuse: \"no\" },\r\n    \"I don't think so\": { refuse: \"no\" },\r\n    \"no way\": { refuse: \"no\" },\r\n    \"absolutely not\": { refuse: \"no\" },\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { RECOGNISED: \r\n                { target: 'query' }\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What would you like to do?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                }\r\n            }\r\n        },\r\n        query: {\r\n            invoke: {\r\n                id: 'rasa',\r\n                src: (context, event) => nluRequest(context.recResult),\r\n                onDone: {\r\n                    actions: assign((context, event) => { return { nluData: event.data }}),\r\n                    target: 'rasaChoice'\r\n                },\r\n                onError: {\r\n                    actions: assign({ errorMessage: (context, event) => console.log(event.data)}),\r\n                    target: 'failure',\r\n                }\r\n            }\r\n        },\r\n        failure: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"There is an error. Please check your proxy, your browser or retry later.\") }\r\n            }\r\n        },\r\n        rasaChoice: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: [{ \r\n                cond: (context) =>  context.nluData.intent.name === 'appointment',\r\n                target: \"appointment\"\r\n                },\r\n                { cond: (context) =>  context.nluData.intent.name === 'TODO_item',\r\n                    target: \"todo\"\r\n                },\r\n                { cond: (context) =>  context.nluData.intent.name === 'timer',\r\n                    target: \"timer\"\r\n                },\r\n                { target: \"welcome\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Actualization.\")\r\n                }\r\n            }\r\n        },\r\n        /*choice: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    //cond: (context) => \"appointment\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { appointment: dict[ context.recResult].appointment } }),\r\n                    target: \"appointment\"\r\n                },\r\n                {\r\n                    //cond: (context) => \"todoitem\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { todoitem: dict[ context.recResult].todoitem } }),\r\n                    target: \"todo\"\r\n                },\r\n                {\r\n                    //cond: (context) => \"timer\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { timer: dict[ context.recResult].timer } }),\r\n                    target: \"timer\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What would you like to do?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Please, choose between appointment, to do list and timer.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },*/\r\n        appointment: {\r\n            ...prompt(\"Let's create an appointment!\"),\r\n            on: { ENDSPEECH: \"who\" }\r\n        },\r\n        todo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create a to-do list!\") }\r\n            }\r\n        },\r\n        timer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's start a timer!\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: dict[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them.\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: dict[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'On which day is your meeting?',\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, can you repeat?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: dict[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: dict[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, can you answer with yes or no?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: dict[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry can you choose between 8 to 12 or 1 to 6?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: dict[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: dict[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry can you answer with yes or no?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: dict[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: dict[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry can you answer with yes or no?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}