{"ast":null,"code":"//\n//  srgs.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n//////////////////////////////////////////////////////////////////////\n// encoding SRGS grammars in javascript\nexport function Grammar(root) {\n  this.$root = root;\n  this.VOID = [OneOf([])];\n  this.NULL = [];\n  this.GARBAGE = [];\n\n  this.$check = function () {\n    for (var i in this) {\n      if (i !== \"$root\" && i !== \"$check\") {\n        try {\n          checkSequenceExpansion(this[i]);\n        } catch (err) {\n          throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\n        }\n      }\n    }\n  };\n}\n_c = Grammar;\nexport function WordSet(str) {\n  var words = str.split(/ +/);\n  var set = {};\n\n  for (var i in words) {\n    set[words[i]] = true;\n  }\n\n  return set;\n} //////////////////////////////////////////////////////////////////////\n// rule expansion constructors\n// sequences are ordinary arrays\n\n_c2 = WordSet;\nexport function Sequence(seq) {\n  return seq;\n}\n_c3 = Sequence;\nexport function Ref(ref) {\n  return new RefClass(ref);\n}\n_c4 = Ref;\nexport function Tag(tag) {\n  return new TagClass(tag);\n}\n_c5 = Tag;\nexport function OneOf(alternatives) {\n  return new OneOfClass(alternatives);\n}\n_c6 = OneOf;\nexport function Repeat(min, max, sequence) {\n  return new RepeatClass(min, max, sequence);\n}\n_c7 = Repeat;\nexport function Optional(sequence) {\n  return new RepeatClass(0, 1, sequence);\n} //////////////////////////////////////////////////////////////////////\n// rule expansion classes\n\n_c8 = Optional;\nexport function RefClass(ruleref) {\n  this.content = ruleref;\n  this._string = \"$\" + ruleref;\n\n  this.toString = function toString() {\n    return this._string;\n  };\n}\n_c9 = RefClass;\nexport function TagClass(tag) {\n  this.content = tag;\n  this._string = \"{\" + tag + \"}\";\n\n  this.toString = function toString() {\n    return this._string;\n  };\n}\n_c10 = TagClass;\nexport function OneOfClass(alternatives) {\n  this.content = alternatives;\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\n\n  this.toString = function toString() {\n    return this._string;\n  };\n}\n_c11 = OneOfClass;\nexport function RepeatClass(min, max, sequence) {\n  this.min = min;\n  this.max = max;\n  this.content = sequence;\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max == Infinity ? \"\" : this.max) + \">\";\n\n  this.toString = function toString() {\n    return this._string;\n  };\n} //////////////////////////////////////////////////////////////////////\n// checking rule expansions\n\n_c12 = RepeatClass;\nexport function throwRuleError(message, error) {\n  if (error == undefined) {\n    throw TypeError(message);\n  } else {\n    throw TypeError(message + \"; \" + error.message);\n  }\n}\nexport function checkSequenceExpansion(sequence) {\n  try {\n    if (sequence.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\n    }\n\n    for (var i in sequence) {\n      if (sequence[i].constructor == Array) {\n        checkSequenceExpansion(sequence[i]);\n      } else if (sequence[i].constructor != String) {\n        sequence[i].checkExpansion();\n      }\n    }\n  } catch (err) {\n    throwRuleError(\"When checking sequence expansion\", err);\n  }\n}\n;\n\nRefClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nTagClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n    throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.content.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\n    }\n\n    for (var i in this.content) {\n      checkSequenceExpansion(this.content[i]);\n    }\n  } catch (err) {\n    throwRuleError(\"When checking OneOf content\", err);\n  }\n};\n\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\n    }\n\n    if (!(0 <= this.min && this.min <= this.max)) {\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\n    }\n\n    checkSequenceExpansion(this.content);\n  } catch (err) {\n    throwRuleError(\"When checking Repeat content\", err);\n  }\n};\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"Grammar\");\n$RefreshReg$(_c2, \"WordSet\");\n$RefreshReg$(_c3, \"Sequence\");\n$RefreshReg$(_c4, \"Ref\");\n$RefreshReg$(_c5, \"Tag\");\n$RefreshReg$(_c6, \"OneOf\");\n$RefreshReg$(_c7, \"Repeat\");\n$RefreshReg$(_c8, \"Optional\");\n$RefreshReg$(_c9, \"RefClass\");\n$RefreshReg$(_c10, \"TagClass\");\n$RefreshReg$(_c11, \"OneOfClass\");\n$RefreshReg$(_c12, \"RepeatClass\");","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/srgs.js"],"names":["Grammar","root","$root","VOID","OneOf","NULL","GARBAGE","$check","i","checkSequenceExpansion","err","throwRuleError","WordSet","str","words","split","set","Sequence","seq","Ref","ref","RefClass","Tag","tag","TagClass","alternatives","OneOfClass","Repeat","min","max","sequence","RepeatClass","Optional","ruleref","content","_string","toString","join","Infinity","message","error","undefined","TypeError","constructor","Array","name","String","checkExpansion","prototype","Number"],"mappings":"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","sourcesContent":["//\n//  srgs.js\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\n//\n/*\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU Lesser General Public License as published \n  by the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n  \n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n  \n  You should have received a copy of the GNU General Public License\n  and the GNU Lesser General Public License along with this program.  \n  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n\n//////////////////////////////////////////////////////////////////////\n// encoding SRGS grammars in javascript\n\nexport function Grammar(root) {\n  this.$root = root;\n  \n  this.VOID = [OneOf([])];\n  this.NULL = [];\n  this.GARBAGE = []; \n  \n  this.$check = function() {\n    for (var i in this) {\n      if (i !== \"$root\" && i !== \"$check\") {\n\ttry {\n\t  checkSequenceExpansion(this[i]);\n\t} catch(err) {\n\t  throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\n\t}\n      }\n    }\n  }\n}\n\nexport function WordSet(str) {\n  var words = str.split(/ +/);\n  var set = {};\n  for (var i in words) {\n    set[words[i]] = true;\n  }\n  return set;\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion constructors\n\n// sequences are ordinary arrays\nexport function Sequence(seq) {\n  return seq;\n}\n\nexport function Ref(ref) {\n  return new RefClass(ref);\n}\n\nexport function Tag(tag) {\n  return new TagClass(tag);\n}\n\nexport function OneOf(alternatives) {\n  return new OneOfClass(alternatives);\n}\n\nexport function Repeat(min, max, sequence) {\n  return new RepeatClass(min, max, sequence);\n}\n\nexport function Optional(sequence) {\n  return new RepeatClass(0, 1, sequence);\n}\n\n//////////////////////////////////////////////////////////////////////\n// rule expansion classes\n\nexport function RefClass(ruleref) {\n  this.content = ruleref;\n  this._string = \"$\" + ruleref;\n  this.toString = function toString() {return this._string}\n}\n    \nexport function TagClass(tag) {\n  this.content = tag;\n  this._string = \"{\" + tag + \"}\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function OneOfClass(alternatives) {\n  this.content = alternatives;\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\n  this.toString = function toString() {return this._string}\n}\n\nexport function RepeatClass(min, max, sequence) {\n  this.min = min;\n  this.max = max;\n  this.content = sequence;\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max==Infinity ? \"\" : this.max) + \">\"\n  this.toString = function toString() {return this._string}\n}\n\n//////////////////////////////////////////////////////////////////////\n// checking rule expansions\n\nexport function throwRuleError(message, error) {\n  if (error == undefined) {\n    throw TypeError(message);\n  } else {\n    throw TypeError(message + \"; \" + error.message);\n  }\n}\n\nexport function checkSequenceExpansion(sequence) {\n  try {\n    if (sequence.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\n    }\n    for (var i in sequence) {\n      if (sequence[i].constructor == Array) {\n\tcheckSequenceExpansion(sequence[i]);\n      } else if (sequence[i].constructor != String) {\n\tsequence[i].checkExpansion();\n      }\n    }\n  } catch(err) {\n    throwRuleError(\"When checking sequence expansion\", err);\n  }\n};\n\nRefClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nTagClass.prototype.checkExpansion = function checkExpansion() {\n  if (this.content.constructor !== String) {\n      throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\n  }\n};\n\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.content.constructor !== Array) {\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\n    }\n    for (var i in this.content) {\n      checkSequenceExpansion(this.content[i]);\n    }\n  } catch(err) {\n    throwRuleError(\"When checking OneOf content\", err);\n  }\n};\n\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\n  try {\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\n    }\n    if (!(0 <= this.min && this.min <= this.max)) {\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\n    }\n    checkSequenceExpansion(this.content);\n  } catch(err) {\n    throwRuleError(\"When checking Repeat content\", err);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}