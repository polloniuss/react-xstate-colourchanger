{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"meeting plant\": {\n    person: \"Meeting\"\n  },\n  \"Mary\": {\n    person: \"Mary Orangeseed\"\n  },\n  \"Dan\": {\n    person: \"Dan Cherryseed\"\n  },\n  \"Steve\": {\n    person: \"Steve Strawberryseed\"\n  },\n  \"Klaus\": {\n    person: \"Klaus Pearseed\"\n  },\n  \"Gus\": {\n    person: \"Gus Bananaseed\"\n  },\n  \"Jennifer\": {\n    person: \"Jennifer Pineappleseed\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"at eight\": {\n    time: \"08:00\"\n  },\n  \"at nine\": {\n    time: \"09:00\"\n  },\n  \"at ten\": {\n    time: \"10:00\"\n  },\n  \"at eleven\": {\n    time: \"11:00\"\n  },\n  \"at noon\": {\n    time: \"12:00\"\n  },\n  \"at one\": {\n    time: \"13:00\"\n  },\n  \"at two\": {\n    time: \"14:00\"\n  },\n  \"at three\": {\n    time: \"15:00\"\n  },\n  \"at four\": {\n    time: \"16:00\"\n  },\n  \"at five\": {\n    time: \"17:00\"\n  },\n  \"at six\": {\n    time: \"18:00\"\n  },\n  \"at seven\": {\n    time: \"19:00\"\n  },\n  \"yes\": {\n    agree: \"yes\"\n  },\n  \"no\": {\n    refuse: \"no\"\n  },\n  \"of course\": {\n    agree: \"yes\"\n  },\n  \"no way\": {\n    refuse: \"no\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: 'Ok. ${context.person}. On which day is your meeting?'\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand what you mean\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmationWholeDay\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand what you mean\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"regularConfirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand what you mean\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    regularConfirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: 'Do you want me to create an appointment with ${context.person} on ${context.date} at ${context.time} ?'\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand what you mean\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmationWholeDay: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: 'Do you want me to create an appointment with ${context.person} on ${context.date} for the whole day?'\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't understand what you mean\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","inspect","url","iframe","say","text","_context","type","value","listen","grammar","person","day","time","agree","refuse","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","duration","regularConfirmation","confirmationWholeDay","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\n\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"meeting plant\": { person: \"Meeting\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at noon\": { time: \"12:00\" },\r\n    \"at one\": { time: \"13:00\" },\r\n    \"at two\": { time: \"14:00\" },\r\n    \"at three\": { time: \"15:00\" },\r\n    \"at four\": { time: \"16:00\" },\r\n    \"at five\": { time: \"17:00\" },\r\n    \"at six\": { time: \"18:00\" },\r\n    \"at seven\": { time: \"19:00\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"no way\": { refuse: \"no\" },\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'Ok. ${context.person}. On which day is your meeting?'\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'Do you want me to create an appointment with ${context.person} on ${context.date} at ${context.time} ?'\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'Do you want me to create an appointment with ${context.person} on ${context.date} for the whole day?'\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}