{"ast":null,"code":"import { useMemo } from 'react';\nimport { useActor } from './useActor';\nexport function fromService(service) {\n  if (process.env.NODE_ENV !== 'production' && !('machine' in service)) {\n    throw new Error(\"Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.\");\n  }\n\n  var machine = service.machine;\n  return {\n    send: service.send.bind(service),\n    subscribe: service.subscribe.bind(service),\n    stop: service.stop,\n    current: service.initialized ? service.state : machine.initialState,\n    name: service.sessionId\n  };\n}\nexport function useService(service) {\n  var serviceActor = useMemo(function () {\n    return fromService(service);\n  }, [service]);\n  return useActor(serviceActor, function (actor) {\n    return actor.current;\n  });\n}","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/own_project/react-xstate-colourchanger/node_modules/@xstate/react/es/useService.js"],"names":["useMemo","useActor","fromService","service","process","env","NODE_ENV","Error","machine","send","bind","subscribe","stop","current","initialized","state","initialState","name","sessionId","useService","serviceActor","actor"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAO,SAASC,WAAT,CAAqBC,OAArB,EAA8B;AACjC,MAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,IAAyC,EAAE,aAAaH,OAAf,CAA7C,EAAsE;AAClE,UAAM,IAAII,KAAJ,CAAU,8HAAV,CAAN;AACH;;AACD,MAAIC,OAAO,GAAGL,OAAO,CAACK,OAAtB;AACA,SAAO;AACHC,IAAAA,IAAI,EAAEN,OAAO,CAACM,IAAR,CAAaC,IAAb,CAAkBP,OAAlB,CADH;AAEHQ,IAAAA,SAAS,EAAER,OAAO,CAACQ,SAAR,CAAkBD,IAAlB,CAAuBP,OAAvB,CAFR;AAGHS,IAAAA,IAAI,EAAET,OAAO,CAACS,IAHX;AAIHC,IAAAA,OAAO,EAAEV,OAAO,CAACW,WAAR,GAAsBX,OAAO,CAACY,KAA9B,GAAsCP,OAAO,CAACQ,YAJpD;AAKHC,IAAAA,IAAI,EAAEd,OAAO,CAACe;AALX,GAAP;AAOH;AACD,OAAO,SAASC,UAAT,CAAoBhB,OAApB,EAA6B;AAChC,MAAIiB,YAAY,GAAGpB,OAAO,CAAC,YAAY;AAAE,WAAOE,WAAW,CAACC,OAAD,CAAlB;AAA8B,GAA7C,EAA+C,CAACA,OAAD,CAA/C,CAA1B;AACA,SAAOF,QAAQ,CAACmB,YAAD,EAAe,UAAUC,KAAV,EAAiB;AAAE,WAAOA,KAAK,CAACR,OAAb;AAAuB,GAAzD,CAAf;AACH","sourcesContent":["import { useMemo } from 'react';\r\nimport { useActor } from './useActor';\r\nexport function fromService(service) {\r\n    if (process.env.NODE_ENV !== 'production' && !('machine' in service)) {\r\n        throw new Error(\"Attempted to use an actor-like object instead of a service in the useService() hook. Please use the useActor() hook instead.\");\r\n    }\r\n    var machine = service.machine;\r\n    return {\r\n        send: service.send.bind(service),\r\n        subscribe: service.subscribe.bind(service),\r\n        stop: service.stop,\r\n        current: service.initialized ? service.state : machine.initialState,\r\n        name: service.sessionId\r\n    };\r\n}\r\nexport function useService(service) {\r\n    var serviceActor = useMemo(function () { return fromService(service); }, [service]);\r\n    return useActor(serviceActor, function (actor) { return actor.current; });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}