{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\nimport { loadGrammar } from './runparser';\nimport { parse } from './chartparser';\nimport { grammar } from './grammars/homeGrammar.ts';\nconst gram = loadGrammar(grammar);\n/*\r\nconst input = \"turn off the light\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = prs.resultsForRule(gram.$root)[0]\r\nconsole.log(result)\r\n*/\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: 'request'\n      },\n      states: {\n        prompt: {\n          entry: say(\"What do you want me to do ?\")\n        }\n      }\n    },\n    request: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: {\n          actions: assign(context => {\n            const prs = parse(context.recResult.split(/\\s+/), gram);\n            const result = prs.resultsForRule(gram.$root)[0];\n            console.log(result);\n            return {\n              directive: result\n            };\n          }),\n          target: \"answer\"\n        }\n      },\n      states: {\n        prompt: {\n          entry: listen()\n        }\n      }\n    },\n    answer: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: 'init'\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Alright. I \".concat(context.directive.action, \" the \").concat(context.directive.object)\n          }))\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmSmartHome.ts"],"names":["send","assign","inspect","url","iframe","loadGrammar","parse","grammar","gram","say","text","_context","type","value","listen","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","request","RECOGNISED","actions","context","prs","recResult","split","result","resultsForRule","$root","console","log","directive","target","answer","action","object"],"mappings":"AAAA,SAAwBA,IAAxB,EAAsCC,MAAtC,QAAoD,QAApD;AAEA,SAASC,OAAT,QAAwB,iBAAxB;AACAA,OAAO,CAAC;AACNC,EAAAA,GAAG,EAAE,gCADC;AAENC,EAAAA,MAAM,EAAE;AAFF,CAAD,CAAP;AAKA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,KAAT,QAAsB,eAAtB;AACA,SAASC,OAAT,QAAwB,2BAAxB;AAEA,MAAMC,IAAI,GAAGH,WAAW,CAACE,OAAD,CAAxB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASE,GAAT,CAAaC,IAAb,EAAyD;AACrD,SAAOV,IAAI,CAAEW,QAAD,KAA2B;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,KAAK,EAAEH;AAAxB,GAA3B,CAAD,CAAX;AACH;;AAED,SAASI,MAAT,GAAgD;AAC5C,SAAOd,IAAI,CAAC,QAAD,CAAX;AACH;;AAED,OAAO,MAAMe,SAAmD,GAAI;AAChEC,EAAAA,OAAO,EAAE,MADuD;AAEhEC,EAAAA,MAAM,EAAE;AACJC,IAAAA,IAAI,EAAE;AACFC,MAAAA,EAAE,EAAE;AACAC,QAAAA,KAAK,EAAE;AADP;AADF,KADF;AAMXC,IAAAA,OAAO,EAAE;AACRL,MAAAA,OAAO,EAAE,QADD;AAELG,MAAAA,EAAE,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAFC;AAGLL,MAAAA,MAAM,EAAE;AACPM,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEf,GAAG,CAAC,6BAAD;AAAZ;AADD;AAHH,KANE;AAaXgB,IAAAA,OAAO,EAAE;AACLT,MAAAA,OAAO,EAAE,QADJ;AAELG,MAAAA,EAAE,EAAE;AACHO,QAAAA,UAAU,EAAE;AACXC,UAAAA,OAAO,EAAE1B,MAAM,CAAE2B,OAAD,IAAa;AAC7B,kBAAMC,GAAG,GAAGvB,KAAK,CAACsB,OAAO,CAACE,SAAR,CAAkBC,KAAlB,CAAwB,KAAxB,CAAD,EAAiCvB,IAAjC,CAAjB;AACA,kBAAMwB,MAAM,GAAGH,GAAG,CAACI,cAAJ,CAAmBzB,IAAI,CAAC0B,KAAxB,EAA+B,CAA/B,CAAf;AACAC,YAAAA,OAAO,CAACC,GAAR,CAAYJ,MAAZ;AACA,mBAAO;AAAEK,cAAAA,SAAS,EAAEL;AAAb,aAAP;AAA8B,WAJf,CADJ;AAMdM,UAAAA,MAAM,EAAE;AANM;AADT,OAFC;AAYLrB,MAAAA,MAAM,EAAE;AACPM,QAAAA,MAAM,EAAE;AAAEC,UAAAA,KAAK,EAAEV,MAAM;AAAf;AADD;AAZH,KAbE;AA6BXyB,IAAAA,MAAM,EAAE;AACPvB,MAAAA,OAAO,EAAE,QADF;AAEJG,MAAAA,EAAE,EAAE;AAAEG,QAAAA,SAAS,EAAE;AAAb,OAFA;AAGJL,MAAAA,MAAM,EAAE;AACPM,QAAAA,MAAM,EAAE;AACPC,UAAAA,KAAK,EAAExB,IAAI,CAAE4B,OAAD,KAAc;AACzBhB,YAAAA,IAAI,EAAE,OADmB;AAEzBC,YAAAA,KAAK,uBAAgBe,OAAO,CAACS,SAAR,CAAkBG,MAAlC,kBAAgDZ,OAAO,CAACS,SAAR,CAAkBI,MAAlE;AAFoB,WAAd,CAAD;AADJ;AADD;AAHJ;AA7BG;AAFwD,CAA7D","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/homeGrammar.ts'\r\n\r\nconst gram = loadGrammar(grammar)\r\n/*\r\nconst input = \"turn off the light\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = prs.resultsForRule(gram.$root)[0]\r\nconsole.log(result)\r\n*/\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n\twelcome: {\r\n\t\tinitial: \"prompt\",\r\n\t    on: { ENDSPEECH: 'request' },\r\n\t    states: {\r\n\t    \tprompt: { entry: say(\"What do you want me to do ?\")},\r\n\t    }\r\n\t},\r\n\trequest: {\r\n\t    initial: \"prompt\",\r\n\t    on: { \r\n\t    \tRECOGNISED: {\r\n\t    \t\tactions: assign((context) => { \r\n\t\t\t\t\t\t\tconst prs = parse(context.recResult.split(/\\s+/), gram)\r\n\t\t\t\t\t\t\tconst result = prs.resultsForRule(gram.$root)[0]\r\n\t\t\t\t\t\t\tconsole.log(result)\r\n\t\t\t\t\t\t\treturn { directive: result } }),\r\n\t\t\t\ttarget: \"answer\",\r\n\t\t\t}\r\n\t    },\r\n\t    states: {\r\n\t    \tprompt: { entry: listen() }\r\n\t    }\r\n\t},\r\n\tanswer: {\r\n\t\tinitial: \"prompt\",\r\n\t    on: { ENDSPEECH: 'init' },\r\n\t    states: {\r\n\t    \tprompt: {\r\n\t    \t\tentry: send((context) => ({\r\n\t    \t\t\ttype: \"SPEAK\",\r\n\t    \t\t\tvalue: `Alright. I ${context.directive.action} the ${context.directive.object}`\r\n\t    \t\t}))\r\n\t    \t}\r\n\t    },\r\n\t}\r\n    }})"]},"metadata":{},"sourceType":"module"}