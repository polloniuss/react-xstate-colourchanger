{"ast":null,"code":"import { send, assign } from \"xstate\";\nimport { inspect } from '@xstate/inspect';\ninspect({\n  url: \"https://statecharts.io/inspect\",\n  iframe: false\n});\n\nfunction say(text) {\n  return send(_context => ({\n    type: \"SPEAK\",\n    value: text\n  }));\n}\n\nfunction listen() {\n  return send('LISTEN');\n}\n\nconst grammar = {\n  \"John\": {\n    person: \"John Appleseed\"\n  },\n  \"Mary\": {\n    person: \"Mary Orangeseed\"\n  },\n  \"Dan\": {\n    person: \"Dan Cherryseed\"\n  },\n  \"Steve\": {\n    person: \"Steve Strawberryseed\"\n  },\n  \"Klaus\": {\n    person: \"Klaus Pearseed\"\n  },\n  \"Gus\": {\n    person: \"Gus Bananaseed\"\n  },\n  \"Jennifer\": {\n    person: \"Jennifer Pineappleseed\"\n  },\n  \"Monday\": {\n    day: \"Monday\"\n  },\n  \"Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"Thursday\": {\n    day: \"Thursday\"\n  },\n  \"Friday\": {\n    day: \"Friday\"\n  },\n  \"Saturday\": {\n    day: \"Saturday\"\n  },\n  \"Sunday\": {\n    day: \"Sunday\"\n  },\n  \"next Monday\": {\n    day: \"Monday\"\n  },\n  \"next Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"next Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"next Thursday\": {\n    day: \"Thursday\"\n  },\n  \"next Friday\": {\n    day: \"Friday\"\n  },\n  \"next Saturday\": {\n    day: \"Saturday\"\n  },\n  \"next Sunday\": {\n    day: \"Sunday\"\n  },\n  \"on Monday\": {\n    day: \"Monday\"\n  },\n  \"on Tuesday\": {\n    day: \"Tuesday\"\n  },\n  \"on Wednesday\": {\n    day: \"Wednesday\"\n  },\n  \"on Thursday\": {\n    day: \"Thursday\"\n  },\n  \"on Friday\": {\n    day: \"Friday\"\n  },\n  \"on Saturday\": {\n    day: \"Saturday\"\n  },\n  \"on Sunday\": {\n    day: \"Sunday\"\n  },\n  \"it's at 8\": {\n    time: \"08:00\"\n  },\n  \"it's at 9\": {\n    time: \"09:00\"\n  },\n  \"it's at 10\": {\n    time: \"10:00\"\n  },\n  \"it's at 11\": {\n    time: \"11:00\"\n  },\n  \"it's at 12\": {\n    time: \"12:00\"\n  },\n  \"it's at 1\": {\n    time: \"13:00\"\n  },\n  \"it's at 2\": {\n    time: \"14:00\"\n  },\n  \"it's at 3\": {\n    time: \"15:00\"\n  },\n  \"it's at 4\": {\n    time: \"16:00\"\n  },\n  \"it's at 5\": {\n    time: \"17:00\"\n  },\n  \"it's at 6\": {\n    time: \"18:00\"\n  },\n  \"at 8\": {\n    time: \"08:00\"\n  },\n  \"at 9\": {\n    time: \"09:00\"\n  },\n  \"at 10\": {\n    time: \"10:00\"\n  },\n  \"at 11\": {\n    time: \"11:00\"\n  },\n  \"at 12\": {\n    time: \"12:00\"\n  },\n  \"at 1\": {\n    time: \"13:00\"\n  },\n  \"at 2\": {\n    time: \"14:00\"\n  },\n  \"at 3\": {\n    time: \"15:00\"\n  },\n  \"at 4\": {\n    time: \"16:00\"\n  },\n  \"at 5\": {\n    time: \"17:00\"\n  },\n  \"at 6\": {\n    time: \"18:00\"\n  },\n  \"8\": {\n    time: \"08:00\"\n  },\n  \"9\": {\n    time: \"09:00\"\n  },\n  \"10\": {\n    time: \"10:00\"\n  },\n  \"11\": {\n    time: \"11:00\"\n  },\n  \"12\": {\n    time: \"12:00\"\n  },\n  \"1\": {\n    time: \"13:00\"\n  },\n  \"2\": {\n    time: \"14:00\"\n  },\n  \"3\": {\n    time: \"15:00\"\n  },\n  \"4\": {\n    time: \"16:00\"\n  },\n  \"5\": {\n    time: \"17:00\"\n  },\n  \"6\": {\n    time: \"18:00\"\n  },\n  \"around 8\": {\n    time: \"08:00\"\n  },\n  \"around 9\": {\n    time: \"09:00\"\n  },\n  \"around 10\": {\n    time: \"10:00\"\n  },\n  \"around 11\": {\n    time: \"11:00\"\n  },\n  \"around 12\": {\n    time: \"12:00\"\n  },\n  \"around 1\": {\n    time: \"13:00\"\n  },\n  \"around 2\": {\n    time: \"14:00\"\n  },\n  \"around 3\": {\n    time: \"15:00\"\n  },\n  \"around 4\": {\n    time: \"16:00\"\n  },\n  \"around 5\": {\n    time: \"17:00\"\n  },\n  \"around 6\": {\n    time: \"18:00\"\n  },\n  \"yes\": {\n    agree: \"yes\"\n  },\n  \"yeah\": {\n    agree: \"yes\"\n  },\n  \"sounds good\": {\n    agree: \"yes\"\n  },\n  \"of course\": {\n    agree: \"yes\"\n  },\n  \"probably\": {\n    agree: \"yes\"\n  },\n  \"it's fine\": {\n    agree: \"yes\"\n  },\n  \"no\": {\n    refuse: \"no\"\n  },\n  \"I'm not sure\": {\n    refuse: \"no\"\n  },\n  \"I don't think so\": {\n    refuse: \"no\"\n  },\n  \"no way\": {\n    refuse: \"no\"\n  },\n  \"absolutely not\": {\n    refuse: \"no\"\n  }\n};\nexport const dmMachine = {\n  initial: 'init',\n  states: {\n    init: {\n      on: {\n        CLICK: 'welcome'\n      }\n    },\n    welcome: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"who\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Let's create an appointment\")\n        }\n      }\n    },\n    who: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"person\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              person: grammar[context.recResult].person\n            };\n          }),\n          target: \"day\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Who are you meeting with?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry I don't know them\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    day: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"day\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              day: grammar[context.recResult].day\n            };\n          }),\n          target: \"duration\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: 'On which day is your meeting?'\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    duration: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmationWholeDay\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"time\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"Will it take the whole day?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    time: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"time\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              time: grammar[context.recResult].time\n            };\n          }),\n          target: \"regularConfirmation\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: say(\"What time is your meeting?\"),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    regularConfirmation: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" at \").concat(context.time, \" ?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmationWholeDay: {\n      initial: \"prompt\",\n      on: {\n        RECOGNISED: [{\n          cond: context => \"agree\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              agree: grammar[context.recResult].agree\n            };\n          }),\n          target: \"confirmation\"\n        }, {\n          cond: context => \"refuse\" in (grammar[context.recResult] || {}),\n          actions: assign(context => {\n            return {\n              refuse: grammar[context.recResult].refuse\n            };\n          }),\n          target: \"who\"\n        }, {\n          target: \".nomatch\"\n        }]\n      },\n      states: {\n        prompt: {\n          entry: send(context => ({\n            type: \"SPEAK\",\n            value: \"Do you want me to create an appointment with \".concat(context.person, \" on \").concat(context.day, \" for the whole day?\")\n          })),\n          on: {\n            ENDSPEECH: \"ask\"\n          }\n        },\n        ask: {\n          entry: listen()\n        },\n        nomatch: {\n          entry: say(\"Sorry ...\"),\n          on: {\n            ENDSPEECH: \"prompt\"\n          }\n        }\n      }\n    },\n    confirmation: {\n      initial: \"prompt\",\n      on: {\n        ENDSPEECH: \"init\"\n      },\n      states: {\n        prompt: {\n          entry: say(\"Your appointment has been created!\")\n        }\n      }\n    }\n  }\n};","map":{"version":3,"sources":["C:/Users/Bérénice/Documents/nodeJS/react-xstate-colourchanger/src/dmAppointment.ts"],"names":["send","assign","inspect","url","iframe","say","text","_context","type","value","listen","grammar","person","day","time","agree","refuse","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","target","ask","nomatch","duration","regularConfirmation","confirmationWholeDay","confirmation"],"mappings":"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","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\n\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"next Monday\": { day: \"Monday\" },\r\n    \"next Tuesday\": { day: \"Tuesday\" },\r\n    \"next Wednesday\": { day: \"Wednesday\" },\r\n    \"next Thursday\": { day: \"Thursday\" },\r\n    \"next Friday\": { day: \"Friday\" },\r\n    \"next Saturday\": { day: \"Saturday\" },\r\n    \"next Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"it's at 8\": { time: \"08:00\" },\r\n    \"it's at 9\": { time: \"09:00\" },\r\n    \"it's at 10\": { time: \"10:00\" },\r\n    \"it's at 11\": { time: \"11:00\" },\r\n    \"it's at 12\": { time: \"12:00\" },\r\n    \"it's at 1\": { time: \"13:00\" },\r\n    \"it's at 2\": { time: \"14:00\" },\r\n    \"it's at 3\": { time: \"15:00\" },\r\n    \"it's at 4\": { time: \"16:00\" },\r\n    \"it's at 5\": { time: \"17:00\" },\r\n    \"it's at 6\": { time: \"18:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"13:00\" },\r\n    \"2\": { time: \"14:00\" },\r\n    \"3\": { time: \"15:00\" },\r\n    \"4\": { time: \"16:00\" },\r\n    \"5\": { time: \"17:00\" },\r\n    \"6\": { time: \"18:00\" },\r\n    \"around 8\": { time: \"08:00\" },\r\n    \"around 9\": { time: \"09:00\" },\r\n    \"around 10\": { time: \"10:00\" },\r\n    \"around 11\": { time: \"11:00\" },\r\n    \"around 12\": { time: \"12:00\" },\r\n    \"around 1\": { time: \"13:00\" },\r\n    \"around 2\": { time: \"14:00\" },\r\n    \"around 3\": { time: \"15:00\" },\r\n    \"around 4\": { time: \"16:00\" },\r\n    \"around 5\": { time: \"17:00\" },\r\n    \"around 6\": { time: \"18:00\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"yeah\": { agree: \"yes\" },\r\n    \"sounds good\": { agree: \"yes\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"probably\": { agree: \"yes\" },\r\n    \"it's fine\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"I'm not sure\": { refuse: \"no\" },\r\n    \"I don't think so\": { refuse: \"no\" },\r\n    \"no way\": { refuse: \"no\" },\r\n    \"absolutely not\": { refuse: \"no\" },\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'On which day is your meeting?',\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n"]},"metadata":{},"sourceType":"module"}