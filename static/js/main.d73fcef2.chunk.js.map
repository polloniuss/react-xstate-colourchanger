{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["send","actions","cancel","say","text","_context","type","value","prompt","initial","states","entry","promptAndAsk","nomatch","help","on","ENDSPEECH","ask","delay","id","target","inspect","url","iframe","dmMachine","init","CLICK","start","MAXSPEECH","cond","context","counter","hist","welcome","RECOGNISED","query","invoke","src","event","nluRequest","recResult","onDone","assign","nluData","data","onError","errorMessage","console","log","failure","rasaChoice","intent","name","appointment","todo","timer","who","dict","person","day","duration","agree","refuse","time","regularConfirmation","confirmationWholeDay","confirmation","first_call","second_call","last_call","todoitem","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","count","progress","match","speaking","recLogResult","test","logIntent","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","result","listen","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","fetch","Request","proxyurl","method","headers","then","json","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.d73fcef2.chunk.js","sourcesContent":["import { MachineConfig, Action, assign, actions } from \"xstate\"\r\nconst { send, cancel } = actions\r\n\r\nimport { inspect } from '@xstate/inspect'\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nimport { nluRequest } from \"./index.tsx\"\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/quotesGrammar.ts'\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\nfunction prompt(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt)\r\n            }\r\n        }\r\n    })\r\n}\r\nfunction promptAndAsk(prompt: string, nomatch: string, help: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n                prompt: {\r\n                    entry: say(prompt),\r\n                    on: { ENDSPEECH: 'ask' }\r\n                },\r\n                ask: {\r\n                    entry: [send('LISTEN'), send('MAXSPEECH', { delay: 8000, id: 'maxsp' })]\r\n                },\r\n                nomatch: {\r\n                    entry: say(nomatch),\r\n                    on: { ENDSPEECH: [{ \r\n                            actions: cancel('maxsp'),\r\n                            target: \"prompt\" \r\n                    }] }\r\n                },\r\n                help: {\r\n                    entry: say(help),\r\n                    on: { ENDSPEECH: [{ \r\n                            actions: cancel('maxsp'),\r\n                            target: \"prompt\" \r\n                    }] }\r\n                }\r\n        }\r\n    })\r\n}\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'start'\r\n            }\r\n        },\r\n        start: {\r\n            initial: 'welcome',\r\n            on: {\r\n                MAXSPEECH: [\r\n                    { \r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"second_call\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"last_call\"\r\n                    },\r\n                    {\r\n                        target: \"first_call\"\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                hist: { type: 'history' },\r\n                welcome: {\r\n                    on: { RECOGNISED: \r\n                            {   actions: cancel('maxsp'),\r\n                                target: 'query'\r\n                            }\r\n                    },\r\n                    ...promptAndAsk(\"What do you want me to do?\"),\r\n                },\r\n                query: {\r\n                    invoke: {\r\n                        id: 'rasa',\r\n                        src: (context, event) => nluRequest(context.recResult),\r\n                        onDone: {\r\n                            actions: [ assign((context, event) => { return { nluData: event.data }}), cancel('maxsp')],\r\n                            target: 'rasaChoice'\r\n                        },\r\n                        onError: {\r\n                            actions: [ assign({ errorMessage: (context, event) => console.log(event.data)}), cancel('maxsp')],\r\n                            target: 'failure',\r\n                        }\r\n                    }\r\n                },\r\n                failure: {\r\n                    initial: \"prompt\",\r\n                    on: { ENDSPEECH: \"welcome\" },\r\n                    states: {\r\n                        prompt: { entry: say(\"There is an error. Please check your proxy, your browser or retry later.\") }\r\n                    }\r\n                },\r\n                rasaChoice: {\r\n                    initial: \"prompt\",\r\n                    on: { ENDSPEECH: [{ \r\n                            cond: (context) =>  context.nluData.intent.name === 'appointment',\r\n                            target: \"appointment\"\r\n                        },\r\n                        { cond: (context) =>  context.nluData.intent.name === 'TODO_item',\r\n                            target: \"todo\"\r\n                        },\r\n                        { cond: (context) =>  context.nluData.intent.name === 'timer',\r\n                            target: \"timer\"\r\n                        },\r\n                        { target: \"welcome\" }]\r\n                    },\r\n                    ...prompt(\"Actualization.\"),\r\n                },\r\n                appointment: {\r\n                    ...prompt(\"Okay, let's create an appointment!\"),\r\n                    on: { ENDSPEECH: \r\n                            { actions: cancel('maxsp'),\r\n                            target: \"who\" },\r\n                    }\r\n                },\r\n                todo: {\r\n                    ...prompt(\"Let's create a to-do list!\"),\r\n                    on: { ENDSPEECH: \r\n                            { actions: cancel('maxsp'),\r\n                            target: \"welcome\" },\r\n                    }\r\n                },\r\n                timer: {\r\n                    ...prompt(\"Let's start a timer!\"),\r\n                    on: { ENDSPEECH: \r\n                            { actions: cancel('maxsp'),\r\n                            target: \"welcome\" },\r\n                    }\r\n                },\r\n                who: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"person\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { person: dict[context.recResult].person } }), cancel('maxsp')],\r\n                            target: \"day\"\r\n\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }]\r\n                    },\r\n                    ...promptAndAsk(\"Who are you meeting with?\",\"Sorry, I don't know them.\", \"You can say Jennifer or John for example.\")\r\n                },\r\n                day: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"day\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { day: dict[context.recResult].day } }), cancel('maxsp')],\r\n                            target: \"duration\"\r\n\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }]\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: 'On which day is your meeting?',\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: [ \r\n                                send('LISTEN'),\r\n                                send('MAXSPEECH', { delay: 8000, id: 'maxsp' })\r\n                            ]\r\n                        },\r\n                        help: {\r\n                            entry: say(\"You can say monday, tuesday and so on.\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry, can you repeat?\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                    }\r\n                },\r\n                duration: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"confirmationWholeDay\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"time\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                    },\r\n                    ...promptAndAsk(\"Will it take the whole day?\",\"Sorry, can you repeat?\", \"You can answer with yes or no.\")\r\n                },\r\n                time: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"time\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { time: dict[context.recResult].time } }), cancel('maxsp')],\r\n                            target: \"regularConfirmation\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }]\r\n                    },\r\n                    ...promptAndAsk(\"What time is your meeting?\",\"Sorry, can you repeat?\", \"You can choose between 8 to 12 or 1 to 6.\")\r\n                },\r\n                regularConfirmation: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"confirmation\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"who\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: [ \r\n                                send('LISTEN'),\r\n                                send('MAXSPEECH', { delay: 8000, id: 'maxsp' })\r\n                            ]\r\n                        },\r\n                        help: {\r\n                            entry: say(\"You can answer with yes or no.\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry can you repeat?\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                    }\r\n                },\r\n                confirmationWholeDay: {\r\n                    initial: \"prompt\",\r\n                    on: {\r\n                        RECOGNISED: [{\r\n                            cond: (context) => \"agree\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { agree: dict[context.recResult].agree } }), cancel('maxsp')],\r\n                            target: \"confirmation\"\r\n                        },\r\n                        {   \r\n                            cond: (context) => \"refuse\" in (dict[context.recResult] || {}),\r\n                            actions: [ assign((context) => { return { refuse: dict[context.recResult].refuse } }), cancel('maxsp')],\r\n                            target: \"who\"\r\n                        },\r\n                        {\r\n                            cond:(context) => \"help\" in (dict[context.recResult] || {}),\r\n                            target: \".help\"\r\n                        },\r\n                        { target: \".nomatch\" }],\r\n                    },\r\n                    states: {\r\n                        prompt: {\r\n                            entry: send((context) => ({\r\n                                type: \"SPEAK\",\r\n                                value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                            })),\r\n                            on: { ENDSPEECH: \"ask\" }\r\n                        },\r\n                        ask: {\r\n                            entry: [ \r\n                                send('LISTEN'),\r\n                                send('MAXSPEECH', { delay: 8000, id: 'maxsp' })\r\n                            ]\r\n                        },\r\n                        help: {\r\n                            entry: say(\"You can answer with yes or no.\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                        nomatch: {\r\n                            entry: say(\"Sorry can you repeat?\"),\r\n                            on: { ENDSPEECH: [{ \r\n                                    actions: cancel('maxsp'),\r\n                                    target: \"prompt\"\r\n                            }] }\r\n                        },\r\n                    }\r\n                },\r\n                confirmation: {\r\n                    ...prompt(\"Your appointment has been created!\"),\r\n                    on: { ENDSPEECH: \"welcome\" }\r\n                }\r\n            }\r\n        },\r\n        first_call: {\r\n            entry: say(\"Please focus on my question.\"),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 3,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n        second_call: {\r\n            entry: say(\"Are you still listening?\"),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 3,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n        last_call: {\r\n            entry: say(\"Whatever, I don't want to listen anymore.\"),\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.counter === 1,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 2,\r\n                        target: \"#root.dm.start.hist\"\r\n                    },\r\n                    {\r\n                        cond: (context) => context.counter === 3,\r\n                        target: \"#root.dm\"\r\n                    },\r\n                ],\r\n            }\r\n        },\r\n    }\r\n})\r\n\r\nconst dict: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string, appointment?: string, todoitem?: string, timer?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"next Monday\": { day: \"Monday\" },\r\n    \"next Tuesday\": { day: \"Tuesday\" },\r\n    \"next Wednesday\": { day: \"Wednesday\" },\r\n    \"next Thursday\": { day: \"Thursday\" },\r\n    \"next Friday\": { day: \"Friday\" },\r\n    \"next Saturday\": { day: \"Saturday\" },\r\n    \"next Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"it's at 8\": { time: \"08:00\" },\r\n    \"it's at 9\": { time: \"09:00\" },\r\n    \"it's at 10\": { time: \"10:00\" },\r\n    \"it's at 11\": { time: \"11:00\" },\r\n    \"it's at 12\": { time: \"12:00\" },\r\n    \"it's at 1\": { time: \"13:00\" },\r\n    \"it's at 2\": { time: \"14:00\" },\r\n    \"it's at 3\": { time: \"15:00\" },\r\n    \"it's at 4\": { time: \"16:00\" },\r\n    \"it's at 5\": { time: \"17:00\" },\r\n    \"it's at 6\": { time: \"18:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"13:00\" },\r\n    \"2\": { time: \"14:00\" },\r\n    \"3\": { time: \"15:00\" },\r\n    \"4\": { time: \"16:00\" },\r\n    \"5\": { time: \"17:00\" },\r\n    \"6\": { time: \"18:00\" },\r\n    \"around 8\": { time: \"08:00\" },\r\n    \"around 9\": { time: \"09:00\" },\r\n    \"around 10\": { time: \"10:00\" },\r\n    \"around 11\": { time: \"11:00\" },\r\n    \"around 12\": { time: \"12:00\" },\r\n    \"around 1\": { time: \"13:00\" },\r\n    \"around 2\": { time: \"14:00\" },\r\n    \"around 3\": { time: \"15:00\" },\r\n    \"around 4\": { time: \"16:00\" },\r\n    \"around 5\": { time: \"17:00\" },\r\n    \"around 6\": { time: \"18:00\" },\r\n    \"I want to book an appointment\": { appointment: \"appointment\" },\r\n    \"rendez-vous\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"Let's create an appointment\": { appointment: \"appointment\" },\r\n    \"I want an appointment\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"schedule\": { appointment: \"appointment\" },\r\n    \"to-do list\": { todoitem: \"todoitem\" },\r\n    \"a to-do list\": { todoitem: \"todoitem\" },\r\n    \"list\": { todoitem: \"todoitem\" },\r\n    \"Let's start a to-do list\": { todoitem: \"todoitem\" },\r\n    \"I have something to do\": { todoitem: \"todoitem\" },\r\n    \"to do list\": { todoitem: \"todoitem\" },\r\n    \"timer\": { timer: \"timer\" },\r\n    \"a timer\": { timer: \"timer\" },\r\n    \"start the timer\": { timer: \"timer\" },\r\n    \"ring\": { timer: \"timer\" },\r\n    \"minute\": { timer: \"timer\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"yeah\": { agree: \"yes\" },\r\n    \"sounds good\": { agree: \"yes\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"probably\": { agree: \"yes\" },\r\n    \"it's fine\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"I'm not sure\": { refuse: \"no\" },\r\n    \"I don't think so\": { refuse: \"no\" },\r\n    \"no way\": { refuse: \"no\" },\r\n    \"absolutely not\": { refuse: \"no\" },\r\n    \"help\": { help: \"help\" },\r\n    \"I don't understand\": { help: \"help\" },\r\n    \"please help\": { help: \"help\" },\r\n    \"can you repeat\": { help: \"help\" },\r\n    \"let's go back\": { help: \"help\" },\r\n}","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\nlet count = 0\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        MAXSPEECH: {\r\n                            actions: assign((context) => {\r\n                                if (context.counter) {\r\n                                    return { counter: context.counter + 1 }\r\n                                } else {\r\n                                    return { counter: count + 1 }\r\n                                }\r\n                            }),\r\n                            target: 'idle'\r\n                        },\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Listening...');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n/*const rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'*/\r\nconst rasaurl = 'https://nlu-heroku.herokuapp.com/model/parse/';\r\nexport const nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        //headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        headers: { 'Origin': 'http://localhost:3000/' },\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);"],"sourceRoot":""}