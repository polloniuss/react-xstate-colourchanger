{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","inspect","url","iframe","grammar","person","day","time","agree","refuse","appointment","todoitem","timer","dmMachine","initial","states","init","on","CLICK","choice","RECOGNISED","cond","context","recResult","actions","assign","target","prompt","entry","ENDSPEECH","ask","nomatch","welcome","welcomeTodo","welcomeTimer","who","duration","regularConfirmation","confirmationWholeDay","confirmation","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.d5b69c36.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\n\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string, appointment?: string, todoitem?: string, timer?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"Monday\": { day: \"Monday\" },\r\n    \"Tuesday\": { day: \"Tuesday\" },\r\n    \"Wednesday\": { day: \"Wednesday\" },\r\n    \"Thursday\": { day: \"Thursday\" },\r\n    \"Friday\": { day: \"Friday\" },\r\n    \"Saturday\": { day: \"Saturday\" },\r\n    \"Sunday\": { day: \"Sunday\" },\r\n    \"next Monday\": { day: \"Monday\" },\r\n    \"next Tuesday\": { day: \"Tuesday\" },\r\n    \"next Wednesday\": { day: \"Wednesday\" },\r\n    \"next Thursday\": { day: \"Thursday\" },\r\n    \"next Friday\": { day: \"Friday\" },\r\n    \"next Saturday\": { day: \"Saturday\" },\r\n    \"next Sunday\": { day: \"Sunday\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"it's at 8\": { time: \"08:00\" },\r\n    \"it's at 9\": { time: \"09:00\" },\r\n    \"it's at 10\": { time: \"10:00\" },\r\n    \"it's at 11\": { time: \"11:00\" },\r\n    \"it's at 12\": { time: \"12:00\" },\r\n    \"it's at 1\": { time: \"13:00\" },\r\n    \"it's at 2\": { time: \"14:00\" },\r\n    \"it's at 3\": { time: \"15:00\" },\r\n    \"it's at 4\": { time: \"16:00\" },\r\n    \"it's at 5\": { time: \"17:00\" },\r\n    \"it's at 6\": { time: \"18:00\" },\r\n    \"at 8\": { time: \"08:00\" },\r\n    \"at 9\": { time: \"09:00\" },\r\n    \"at 10\": { time: \"10:00\" },\r\n    \"at 11\": { time: \"11:00\" },\r\n    \"at 12\": { time: \"12:00\" },\r\n    \"at 1\": { time: \"13:00\" },\r\n    \"at 2\": { time: \"14:00\" },\r\n    \"at 3\": { time: \"15:00\" },\r\n    \"at 4\": { time: \"16:00\" },\r\n    \"at 5\": { time: \"17:00\" },\r\n    \"at 6\": { time: \"18:00\" },\r\n    \"8\": { time: \"08:00\" },\r\n    \"9\": { time: \"09:00\" },\r\n    \"10\": { time: \"10:00\" },\r\n    \"11\": { time: \"11:00\" },\r\n    \"12\": { time: \"12:00\" },\r\n    \"1\": { time: \"13:00\" },\r\n    \"2\": { time: \"14:00\" },\r\n    \"3\": { time: \"15:00\" },\r\n    \"4\": { time: \"16:00\" },\r\n    \"5\": { time: \"17:00\" },\r\n    \"6\": { time: \"18:00\" },\r\n    \"around 8\": { time: \"08:00\" },\r\n    \"around 9\": { time: \"09:00\" },\r\n    \"around 10\": { time: \"10:00\" },\r\n    \"around 11\": { time: \"11:00\" },\r\n    \"around 12\": { time: \"12:00\" },\r\n    \"around 1\": { time: \"13:00\" },\r\n    \"around 2\": { time: \"14:00\" },\r\n    \"around 3\": { time: \"15:00\" },\r\n    \"around 4\": { time: \"16:00\" },\r\n    \"around 5\": { time: \"17:00\" },\r\n    \"around 6\": { time: \"18:00\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"yeah\": { agree: \"yes\" },\r\n    \"sounds good\": { agree: \"yes\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"probably\": { agree: \"yes\" },\r\n    \"it's fine\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"I'm not sure\": { refuse: \"no\" },\r\n    \"I don't think so\": { refuse: \"no\" },\r\n    \"no way\": { refuse: \"no\" },\r\n    \"absolutely not\": { refuse: \"no\" },\r\n    \"I want to book an appointment\": { appointment: \"appointment\" },\r\n    \"rendez-vous\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"Let's create an appointment\": { appointment: \"appointment\" },\r\n    \"I want an appointment\": { appointment: \"appointment\" },\r\n    \"appointment\": { appointment: \"appointment\" },\r\n    \"schedule\": { appointment: \"appointment\" },\r\n    \"to-do list\": { todoitem: \"todoitem\" },\r\n    \"a to-do list\": { todoitem: \"todoitem\" },\r\n    \"list\": { todoitem: \"todoitem\" },\r\n    \"Let's start a to-do list\": { todoitem: \"todoitem\" },\r\n    \"I have something to do\": { todoitem: \"todoitem\" },\r\n    \"to do list\": { todoitem: \"todoitem\" },\r\n    \"timer\": { timer: \"timer\" },\r\n    \"a timer\": { timer: \"timer\" },\r\n    \"start the timer\": { timer: \"timer\" },\r\n    \"ring\": { timer: \"timer\" },\r\n    \"minute\": { timer: \"timer\" },\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'choice'\r\n            }\r\n        },\r\n        choice: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"appointment\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { appointment: grammar[ context.recResult].appointment } }),\r\n                    target: \"welcome\"\r\n                },\r\n                {\r\n                    cond: (context) => \"todoitem\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { todoitem: grammar[ context.recResult].todoitem } }),\r\n                    target: \"welcomeTodo\"\r\n                },\r\n                {\r\n                    cond: (context) => \"timer\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { timer: grammar[ context.recResult].timer } }),\r\n                    target: \"welcomeTimer\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What would you like to do?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry, what do you mean?\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment!\") }\r\n            }\r\n        },\r\n        welcomeTodo: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create a to-do list!\") }\r\n            }\r\n        },\r\n        welcomeTimer: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's start a timer!\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'On which day is your meeting?',\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} at ${context.time} ?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: `Do you want me to create an appointment with ${context.person} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry ...\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}