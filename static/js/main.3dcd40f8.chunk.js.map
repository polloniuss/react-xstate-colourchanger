{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","listen","inspect","url","iframe","grammar","person","day","time","agree","refuse","dmMachine","initial","states","init","on","CLICK","welcome","ENDSPEECH","prompt","entry","who","RECOGNISED","cond","context","recResult","actions","assign","target","ask","nomatch","duration","regularConfirmation","confirmationWholeDay","confirmation","machine","Machine","id","dm","asrtts","idle","LISTEN","SPEAK","event","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","console","log","test","logIntent","nluData","intent","name","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","cancel","useSpeechRecognition","onResult","result","stop","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","changeColour","document","body","background","ttsStart","effect","ttsCancel","current","onClick","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.3dcd40f8.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nimport { inspect } from '@xstate/inspect';\r\n\r\ninspect({\r\n  url: \"https://statecharts.io/inspect\",\r\n  iframe: false\r\n});\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nconst grammar: { [index: string]: { person?: string, day?: string, time?: string, agree?: string, refuse?: string } } = {\r\n    \"John\": { person: \"John Appleseed\" },\r\n    \"meeting\": { person: \"Meeting\" },\r\n    \"Mary\": { person: \"Mary Orangeseed\" },\r\n    \"Dan\": { person: \"Dan Cherryseed\" },\r\n    \"Steve\": { person: \"Steve Strawberryseed\" },\r\n    \"Klaus\": { person: \"Klaus Pearseed\" },\r\n    \"Gus\": { person: \"Gus Bananaseed\" },\r\n    \"Jennifer\": { person: \"Jennifer Pineappleseed\" },\r\n    \"on Monday\": { day: \"Monday\" },\r\n    \"on Tuesday\": { day: \"Tuesday\" },\r\n    \"on Wednesday\": { day: \"Wednesday\" },\r\n    \"on Thursday\": { day: \"Thursday\" },\r\n    \"on Friday\": { day: \"Friday\" },\r\n    \"on Saturday\": { day: \"Saturday\" },\r\n    \"on Sunday\": { day: \"Sunday\" },\r\n    \"at eight\": { time: \"08:00\" },\r\n    \"at nine\": { time: \"09:00\" },\r\n    \"at ten\": { time: \"10:00\" },\r\n    \"at eleven\": { time: \"11:00\" },\r\n    \"at noon\": { time: \"12:00\" },\r\n    \"at one\": { time: \"13:00\" },\r\n    \"at two\": { time: \"14:00\" },\r\n    \"at three\": { time: \"15:00\" },\r\n    \"at four\": { time: \"16:00\" },\r\n    \"at five\": { time: \"17:00\" },\r\n    \"at six\": { time: \"18:00\" },\r\n    \"at seven\": { time: \"19:00\" },\r\n    \"yes\": { agree: \"yes\" },\r\n    \"no\": { refuse: \"no\" },\r\n    \"of course\": { agree: \"yes\" },\r\n    \"no way\": { refuse: \"no\" },\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"who\" },\r\n            states: {\r\n                prompt: { entry: say(\"Let's create an appointment\") }\r\n            }\r\n        },\r\n        who: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Who are you meeting with?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't know them\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                }\r\n            }\r\n        },\r\n        day: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"day\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { day: grammar[context.recResult].day } }),\r\n                    target: \"duration\"\r\n\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'Ok. ${context.person}. On which day is your meeting?'\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        duration: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmationWholeDay\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"time\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        time: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"regularConfirmation\"\r\n                },\r\n                { target: \".nomatch\" }]\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        regularConfirmation: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'Do you want me to create an appointment with ${context.person} on ${context.date} at ${context.time} ?'\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmationWholeDay: {\r\n            initial: \"prompt\",\r\n            on: {\r\n                RECOGNISED: [{\r\n                    cond: (context) => \"agree\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { agree: grammar[context.recResult].agree } }),\r\n                    target: \"confirmation\"\r\n                },\r\n                {   \r\n                    cond: (context) => \"refuse\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { refuse: grammar[context.recResult].refuse } }),\r\n                    target: \"who\"\r\n                },\r\n                { target: \".nomatch\" }],\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context) => ({\r\n                        type: \"SPEAK\",\r\n                        value: 'Do you want me to create an appointment with ${context.person} on ${context.date} for the whole day?'\r\n                    })),\r\n                    on: { ENDSPEECH: \"ask\" }\r\n                },\r\n                ask: {\r\n                    entry: listen()\r\n                },\r\n                nomatch: {\r\n                    entry: say(\"Sorry I don't understand what you mean\"),\r\n                    on: { ENDSPEECH: \"prompt\" }\r\n                },\r\n            }\r\n        },\r\n        confirmation: {\r\n            initial: \"prompt\",\r\n            on: { ENDSPEECH: \"init\" },\r\n            states: {\r\n                prompt: { entry: say(\"Your appointment has been created!\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n\t\t    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n\t\t    \tprogress: {\r\n\t\t\t},\t    \t\t\t\t\t\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a color command.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            changeColour: asEffect((context) => {\r\n                console.log('Repainting...');\r\n                document.body.style.background = context.recResult;\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            })\r\n            /* speak: asEffect((context) => {\r\n\t     * console.log('Speaking...');\r\n             *     speak({text: context.ttsAgenda })\r\n             * } */\r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://rasa-nlu-api-00.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n    }))\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}